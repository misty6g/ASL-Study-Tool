{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestMode = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        // Shuffle the cards for the test\n        const shuffledCards = [...response.data].sort(() => Math.random() - 0.5);\n        setCards(shuffledCards);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n    fetchCards();\n  }, [deckId]);\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n  const transformGoogleDriveUrl = url => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n\n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    return url;\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const currentCard = cards[currentCardIndex];\n\n    // Check if the answer contains slashes (multiple correct options)\n    const correctAnswers = currentCard.answer.split('/').map(ans => ans.trim().toLowerCase());\n    const normalizedUserAnswer = userAnswer.trim().toLowerCase();\n\n    // Check if the answer is exactly correct or off by 1 character\n    const isCorrect = correctAnswers.some(answer => answer === normalizedUserAnswer || isWithinEditDistance(answer, normalizedUserAnswer, 1));\n    if (isCorrect) {\n      setResults(prev => ({\n        ...prev,\n        correct: [...prev.correct, currentCard],\n        userAnswers: [...prev.userAnswers, userAnswer]\n      }));\n    } else {\n      setResults(prev => ({\n        ...prev,\n        incorrect: [...prev.incorrect, currentCard],\n        userAnswers: [...prev.userAnswers, userAnswer]\n      }));\n    }\n    setSubmitted(true);\n  };\n\n  // Function to check if two strings are within a certain edit distance\n  const isWithinEditDistance = (s1, s2, maxDistance) => {\n    // If the difference in length is already greater than maxDistance, return false\n    if (Math.abs(s1.length - s2.length) > maxDistance) return false;\n\n    // For single character difference, we can do simple checks\n    if (maxDistance === 1) {\n      // If strings are equal, edit distance is 0\n      if (s1 === s2) return true;\n\n      // If length is the same, check for a single character substitution\n      if (s1.length === s2.length) {\n        let diffCount = 0;\n        for (let i = 0; i < s1.length; i++) {\n          if (s1[i] !== s2[i]) {\n            diffCount++;\n            if (diffCount > maxDistance) return false;\n          }\n        }\n        return true;\n      }\n\n      // Check for a single insertion or deletion\n      if (Math.abs(s1.length - s2.length) === 1) {\n        const longer = s1.length > s2.length ? s1 : s2;\n        const shorter = s1.length > s2.length ? s2 : s1;\n        let longIndex = 0;\n        let shortIndex = 0;\n        let diffCount = 0;\n        while (longIndex < longer.length && shortIndex < shorter.length) {\n          if (longer[longIndex] !== shorter[shortIndex]) {\n            diffCount++;\n            if (diffCount > maxDistance) return false;\n            // Move only the longer string's index (skip the extra character)\n            longIndex++;\n          } else {\n            // Characters match, move both indices\n            longIndex++;\n            shortIndex++;\n          }\n        }\n        return true;\n      }\n    }\n\n    // For more complex cases, we'd implement a full Levenshtein distance algorithm\n    // But for maxDistance=1, the above checks are sufficient\n    return false;\n  };\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n  const handleBackToDeck = () => {\n    navigate(`/deck/${deckId}`);\n  };\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading test...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this);\n  }\n  if (cards.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No Cards Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This deck doesn't have any cards to test with.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this);\n  }\n  if (testComplete) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const percentCorrect = Math.round(results.correct.length / totalCards * 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Test Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Score: \", percentCorrect, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [results.correct.length, \" out of \", totalCards, \" correct\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), results.incorrect.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"incorrect-answers\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Review Incorrect Answers:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"review-list\",\n          children: results.incorrect.map((card, index) => {\n            const userAnswerIndex = results.correct.length + index;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"review-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Sign:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 24\n                }, this), \" \", card.answer]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Your answer:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 24\n                }, this), \" \", results.userAnswers[userAnswerIndex]]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this)]\n            }, card.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"results-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartOver,\n          className: \"start-over-btn\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToDeck,\n          className: \"back-to-deck-btn\",\n          children: \"Back to Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this);\n  }\n  const currentCard = cards[currentCardIndex];\n  const isGoogleDriveEmbed = videoSource.includes('/preview');\n\n  // Prepare variables for answer checking\n  const correctAnswers = currentCard.answer.split('/').map(ans => ans.trim().toLowerCase());\n  const normalizedUserAnswer = userAnswer.trim().toLowerCase();\n  const isAnswerCorrect = correctAnswers.some(answer => answer === normalizedUserAnswer || isWithinEditDistance(answer, normalizedUserAnswer, 1));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"\\u2190 Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ASL Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: [currentCardIndex + 1, \" of \", cards.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: isGoogleDriveEmbed ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          allow: \"autoplay\",\n          allowFullScreen: true,\n          style: {\n            border: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          url: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          controls: true,\n          playing: !submitted,\n          config: {\n            file: {\n              attributes: {\n                controlsList: 'nodownload',\n                disablePictureInPicture: true\n              },\n              forceVideo: true\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this), !submitted ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"answer-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"answer\",\n            children: \"What is the sign?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"answer\",\n            type: \"text\",\n            value: userAnswer,\n            onChange: e => setUserAnswer(e.target.value),\n            placeholder: \"Type your answer here\",\n            autoComplete: \"off\",\n            autoFocus: true,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `feedback ${isAnswerCorrect ? 'correct' : 'incorrect'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isAnswerCorrect ? 'Correct!' : 'Incorrect'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The correct answer is: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 38\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextCard,\n          className: \"next-btn\",\n          children: currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n};\n_s(TestMode, \"ltZ/XE/TRo4Yv6M7CiLVVhbstNs=\", false, function () {\n  return [useNavigate];\n});\n_c = TestMode;\nexport default TestMode;\nvar _c;\n$RefreshReg$(_c, \"TestMode\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","ReactPlayer","jsxDEV","_jsxDEV","TestMode","deckId","_s","cards","setCards","loading","setLoading","error","setError","currentCardIndex","setCurrentCardIndex","userAnswer","setUserAnswer","submitted","setSubmitted","testComplete","setTestComplete","results","setResults","correct","incorrect","userAnswers","videoSource","setVideoSource","navigate","fetchCards","response","get","process","env","REACT_APP_API_URL","shuffledCards","data","sort","Math","random","err","length","currentCard","video_url","includes","transformedUrl","transformGoogleDriveUrl","handleKeyPress","e","key","handleNextCard","window","addEventListener","removeEventListener","url","fileId","match","handleSubmit","preventDefault","correctAnswers","answer","split","map","ans","trim","toLowerCase","normalizedUserAnswer","isCorrect","some","isWithinEditDistance","prev","s1","s2","maxDistance","abs","diffCount","i","longer","shorter","longIndex","shortIndex","handleBackToDeck","handleStartOver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","totalCards","percentCorrect","round","card","index","userAnswerIndex","id","isGoogleDriveEmbed","isAnswerCorrect","src","width","height","allow","allowFullScreen","style","border","controls","playing","config","file","attributes","controlsList","disablePictureInPicture","forceVideo","onSubmit","htmlFor","type","value","onChange","target","placeholder","autoComplete","autoFocus","required","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\n\ninterface Card {\n  id: string;\n  video_url: string;\n  answer: string;\n}\n\ninterface TestModeProps {\n  deckId: string;\n}\n\nconst TestMode: React.FC<TestModeProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState<{ correct: Card[], incorrect: Card[], userAnswers: string[] }>({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState<string>('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        // Shuffle the cards for the test\n        const shuffledCards = [...response.data].sort(() => Math.random() - 0.5);\n        setCards(shuffledCards);\n        setLoading(false);\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    fetchCards();\n  }, [deckId]);\n\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n\n  const transformGoogleDriveUrl = (url: string): string => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n      \n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      \n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    \n    return url;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const currentCard = cards[currentCardIndex];\n    \n    // Check if the answer contains slashes (multiple correct options)\n    const correctAnswers = currentCard.answer.split('/').map(ans => ans.trim().toLowerCase());\n    const normalizedUserAnswer = userAnswer.trim().toLowerCase();\n    \n    // Check if the answer is exactly correct or off by 1 character\n    const isCorrect = correctAnswers.some(answer => \n      answer === normalizedUserAnswer || isWithinEditDistance(answer, normalizedUserAnswer, 1)\n    );\n\n    if (isCorrect) {\n      setResults(prev => ({\n        ...prev,\n        correct: [...prev.correct, currentCard],\n        userAnswers: [...prev.userAnswers, userAnswer]\n      }));\n    } else {\n      setResults(prev => ({\n        ...prev,\n        incorrect: [...prev.incorrect, currentCard],\n        userAnswers: [...prev.userAnswers, userAnswer]\n      }));\n    }\n\n    setSubmitted(true);\n  };\n\n  // Function to check if two strings are within a certain edit distance\n  const isWithinEditDistance = (s1: string, s2: string, maxDistance: number): boolean => {\n    // If the difference in length is already greater than maxDistance, return false\n    if (Math.abs(s1.length - s2.length) > maxDistance) return false;\n    \n    // For single character difference, we can do simple checks\n    if (maxDistance === 1) {\n      // If strings are equal, edit distance is 0\n      if (s1 === s2) return true;\n      \n      // If length is the same, check for a single character substitution\n      if (s1.length === s2.length) {\n        let diffCount = 0;\n        for (let i = 0; i < s1.length; i++) {\n          if (s1[i] !== s2[i]) {\n            diffCount++;\n            if (diffCount > maxDistance) return false;\n          }\n        }\n        return true;\n      }\n      \n      // Check for a single insertion or deletion\n      if (Math.abs(s1.length - s2.length) === 1) {\n        const longer = s1.length > s2.length ? s1 : s2;\n        const shorter = s1.length > s2.length ? s2 : s1;\n        \n        let longIndex = 0;\n        let shortIndex = 0;\n        let diffCount = 0;\n        \n        while (longIndex < longer.length && shortIndex < shorter.length) {\n          if (longer[longIndex] !== shorter[shortIndex]) {\n            diffCount++;\n            if (diffCount > maxDistance) return false;\n            // Move only the longer string's index (skip the extra character)\n            longIndex++;\n          } else {\n            // Characters match, move both indices\n            longIndex++;\n            shortIndex++;\n          }\n        }\n        \n        return true;\n      }\n    }\n    \n    // For more complex cases, we'd implement a full Levenshtein distance algorithm\n    // But for maxDistance=1, the above checks are sufficient\n    return false;\n  };\n\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n\n  const handleBackToDeck = () => {\n    navigate(`/deck/${deckId}`);\n  };\n\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"test-container loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading test...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"test-container error\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (cards.length === 0) {\n    return (\n      <div className=\"test-container error\">\n        <h2>No Cards Available</h2>\n        <p>This deck doesn't have any cards to test with.</p>\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (testComplete) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const percentCorrect = Math.round((results.correct.length / totalCards) * 100);\n    \n    return (\n      <div className=\"test-container results\">\n        <h1>Test Results</h1>\n        <div className=\"results-summary\">\n          <h2>Score: {percentCorrect}%</h2>\n          <p>\n            {results.correct.length} out of {totalCards} correct\n          </p>\n        </div>\n\n        {results.incorrect.length > 0 && (\n          <div className=\"incorrect-answers\">\n            <h3>Review Incorrect Answers:</h3>\n            <ul className=\"review-list\">\n              {results.incorrect.map((card, index) => {\n                const userAnswerIndex = results.correct.length + index;\n                return (\n                  <li key={card.id} className=\"review-item\">\n                    <p><strong>Sign:</strong> {card.answer}</p>\n                    <p><strong>Your answer:</strong> {results.userAnswers[userAnswerIndex]}</p>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"results-actions\">\n          <button onClick={handleStartOver} className=\"start-over-btn\">\n            Start Over\n          </button>\n          <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n            Back to Deck\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const currentCard = cards[currentCardIndex];\n  const isGoogleDriveEmbed = videoSource.includes('/preview');\n  \n  // Prepare variables for answer checking\n  const correctAnswers = currentCard.answer.split('/').map(ans => ans.trim().toLowerCase());\n  const normalizedUserAnswer = userAnswer.trim().toLowerCase();\n  const isAnswerCorrect = correctAnswers.some(answer => \n    answer === normalizedUserAnswer || isWithinEditDistance(answer, normalizedUserAnswer, 1)\n  );\n\n  return (\n    <div className=\"test-container\">\n      <div className=\"test-header\">\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          ← Back to Deck\n        </button>\n        <h1>ASL Test</h1>\n        <div className=\"progress\">\n          {currentCardIndex + 1} of {cards.length}\n        </div>\n      </div>\n\n      <div className=\"test-content\">\n        <div className=\"video-container\">\n          {isGoogleDriveEmbed ? (\n            <iframe \n              src={videoSource}\n              width=\"100%\" \n              height=\"100%\" \n              allow=\"autoplay\" \n              allowFullScreen\n              style={{ border: 'none' }}\n            ></iframe>\n          ) : (\n            <ReactPlayer\n              url={videoSource}\n              width=\"100%\"\n              height=\"100%\"\n              controls\n              playing={!submitted}\n              config={{\n                file: {\n                  attributes: {\n                    controlsList: 'nodownload',\n                    disablePictureInPicture: true\n                  },\n                  forceVideo: true\n                }\n              }}\n            />\n          )}\n        </div>\n\n        {!submitted ? (\n          <form onSubmit={handleSubmit} className=\"answer-form\">\n            <div className=\"input-group\">\n              <label htmlFor=\"answer\">What is the sign?</label>\n              <input\n                id=\"answer\"\n                type=\"text\"\n                value={userAnswer}\n                onChange={(e) => setUserAnswer(e.target.value)}\n                placeholder=\"Type your answer here\"\n                autoComplete=\"off\"\n                autoFocus\n                required\n              />\n            </div>\n            <button type=\"submit\" className=\"submit-btn\">\n              Submit\n            </button>\n          </form>\n        ) : (\n          <div className={`feedback ${isAnswerCorrect ? 'correct' : 'incorrect'}`}>\n            <h2>\n              {isAnswerCorrect \n                ? 'Correct!' \n                : 'Incorrect'}\n            </h2>\n            <p>\n              The correct answer is: <strong>{currentCard.answer}</strong>\n            </p>\n            <button onClick={handleNextCard} className=\"next-btn\">\n              {currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TestMode; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}