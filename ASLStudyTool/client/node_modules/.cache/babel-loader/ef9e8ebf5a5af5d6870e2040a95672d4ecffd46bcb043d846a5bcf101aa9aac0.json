{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Flashcard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport './Flashcard.css';\n// Import ReactPlayer directly to prevent lazy loading issues\nimport ReactPlayer from 'react-player';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Flashcard = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  videoUrl,\n  answer,\n  showInstructions,\n  onFirstFlip,\n  isHighlighted = false,\n  onCardInteraction,\n  cardId,\n  isStarred = false,\n  onStarToggle\n}, ref) => {\n  _s();\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [videoSource, setVideoSource] = useState('');\n  const [hasFlipped, setHasFlipped] = useState(false);\n  const [wasInteractedWith, setWasInteractedWith] = useState(false);\n  const [starred, setStarred] = useState(isStarred);\n\n  // Update internal starred state when prop changes\n  useEffect(() => {\n    setStarred(isStarred);\n  }, [isStarred]);\n\n  // Expose flip method to parent components\n  useImperativeHandle(ref, () => ({\n    flip: state => {\n      setIsFlipped(state);\n      if (!hasFlipped && state) {\n        setHasFlipped(true);\n        onFirstFlip();\n      }\n      // Also count programmatic flips as interaction\n      if (isHighlighted && cardId && onCardInteraction) {\n        handleInteraction();\n      }\n    }\n  }));\n\n  // Handle any interaction with the card\n  const handleInteraction = () => {\n    if (!wasInteractedWith && isHighlighted && cardId && onCardInteraction) {\n      setWasInteractedWith(true);\n      onCardInteraction(cardId);\n    }\n  };\n\n  // Handle starring a card\n  const handleStar = e => {\n    e.stopPropagation(); // Prevent card from flipping\n\n    if (cardId && onStarToggle) {\n      const newStarredState = !starred;\n      setStarred(newStarredState);\n      onStarToggle(cardId, newStarredState);\n    }\n  };\n  useEffect(() => {\n    // Transform Google Drive URL to direct video URL\n    const transformGoogleDriveUrl = url => {\n      // Check if it's a Google Drive URL\n      if (url.includes('drive.google.com')) {\n        // Extract file ID from URL\n        let fileId = '';\n\n        // Handle different Google Drive URL formats\n        if (url.includes('drive.google.com/file/d/')) {\n          // Format: https://drive.google.com/file/d/{fileId}/view\n          const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n          if (match && match[1]) {\n            fileId = match[1];\n          }\n        } else if (url.includes('drive.google.com/open?id=')) {\n          // Format: https://drive.google.com/open?id={fileId}\n          const match = url.match(/open\\?id=([^&]+)/);\n          if (match && match[1]) {\n            fileId = match[1];\n          }\n        } else if (url.includes('id=')) {\n          // Format: https://drive.google.com/uc?id={fileId}\n          const match = url.match(/id=([^&]+)/);\n          if (match && match[1]) {\n            fileId = match[1];\n          }\n        }\n        if (fileId) {\n          console.log('Extracted Google Drive file ID:', fileId);\n          // Use embed format which works better than direct download\n          return `https://drive.google.com/file/d/${fileId}/preview`;\n        }\n      }\n\n      // If not a Google Drive URL or couldn't extract ID, return original\n      return url;\n    };\n\n    // Set video source with transformation if needed\n    if (videoUrl.includes('drive.google.com')) {\n      const transformedUrl = transformGoogleDriveUrl(videoUrl);\n      console.log('Transformed Google Drive URL:', transformedUrl);\n      setVideoSource(transformedUrl);\n    } else {\n      setVideoSource(videoUrl);\n    }\n    console.log('Video URL:', videoUrl);\n  }, [videoUrl]);\n  const handleVideoLoad = () => {\n    console.log('Video loaded successfully:', videoSource);\n    setIsVideoLoaded(true);\n    setIsLoading(false);\n    setError(null);\n  };\n  const handleVideoError = e => {\n    console.error('Video error:', e);\n    console.error('Failed URL:', videoSource);\n    setError('Failed to load video. Please check your internet connection and try again.');\n    setIsLoading(false);\n\n    // Use a reliable fallback video if the main one fails\n    setVideoSource('https://filesamples.com/samples/video/mp4/sample_640x360.mp4');\n  };\n  const handleVideoStart = () => {\n    console.log('Video started playing');\n    setIsLoading(false);\n  };\n  const handleFlip = e => {\n    // Don't flip if clicking on the video container or star button\n    if (e.target.closest('.video-content') || e.target.closest('.star-button')) {\n      return;\n    }\n\n    // If this is the first time any card is being flipped, call the parent function\n    if (!hasFlipped) {\n      setHasFlipped(true);\n      onFirstFlip();\n    }\n    setIsFlipped(!isFlipped);\n\n    // Notify parent about the interaction\n    handleInteraction();\n  };\n\n  // Special handling for Google Drive embedded videos\n  const isGoogleDriveEmbed = videoSource.includes('/preview');\n\n  // Determine if the card should appear highlighted\n  const shouldHighlight = isHighlighted && !wasInteractedWith;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flashcard-container ${shouldHighlight ? 'highlighted' : ''} ${starred ? 'starred' : ''}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `flashcard ${isFlipped ? 'flipped' : ''}`,\n      onClick: handleFlip,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flashcard-inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-front\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-title\",\n              children: \"Sign\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"video-content\",\n              children: [isLoading && !isGoogleDriveEmbed && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"video-loading\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"loading-spinner\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"Loading video...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 19\n              }, this), error && !isGoogleDriveEmbed && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"video-error\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: error\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 189,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: e => {\n                    e.stopPropagation();\n                    setIsLoading(true);\n                    setError(null);\n                    // Try reloading the video\n                    const currentUrl = videoSource;\n                    setVideoSource('');\n                    setTimeout(() => setVideoSource(currentUrl), 100);\n                  },\n                  className: \"retry-button\",\n                  children: \"Try Again\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 190,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, this), isGoogleDriveEmbed ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n                src: videoSource,\n                width: \"100%\",\n                height: \"100%\",\n                allow: \"autoplay\",\n                allowFullScreen: true,\n                style: {\n                  border: 'none'\n                },\n                onLoad: () => {\n                  setIsLoading(false);\n                  setIsVideoLoaded(true);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 19\n              }, this) :\n              // For regular videos, use ReactPlayer\n              !error && videoSource && /*#__PURE__*/_jsxDEV(ReactPlayer, {\n                url: videoSource,\n                width: \"100%\",\n                height: \"100%\",\n                controls: true,\n                playing: false,\n                onReady: handleVideoLoad,\n                onError: handleVideoError,\n                onStart: handleVideoStart,\n                config: {\n                  file: {\n                    attributes: {\n                      controlsList: 'nodownload',\n                      disablePictureInPicture: true\n                    },\n                    forceVideo: true\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this), showInstructions && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-instruction\",\n              children: \"Click anywhere outside the video to flip\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"star-button-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `star-button ${starred ? 'starred' : ''}`,\n                onClick: handleStar,\n                title: starred ? 'Unstar this card' : 'Star this card',\n                children: starred ? '★' : '☆'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-back\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-title\",\n              children: \"Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"answer-content\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: answer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this), showInstructions && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-instruction\",\n              children: \"Click to see the sign again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"star-button-container\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `star-button ${starred ? 'starred' : ''}`,\n                onClick: handleStar,\n                title: starred ? 'Unstar this card' : 'Star this card',\n                children: starred ? '★' : '☆'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}, \"gdTuYarG8Ph9JS4wBiBax5OqoyE=\")), \"gdTuYarG8Ph9JS4wBiBax5OqoyE=\");\n_c2 = Flashcard;\nexport default Flashcard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Flashcard$forwardRef\");\n$RefreshReg$(_c2, \"Flashcard\");","map":{"version":3,"names":["React","useState","useEffect","forwardRef","useImperativeHandle","ReactPlayer","jsxDEV","_jsxDEV","Flashcard","_s","_c","videoUrl","answer","showInstructions","onFirstFlip","isHighlighted","onCardInteraction","cardId","isStarred","onStarToggle","ref","isFlipped","setIsFlipped","isVideoLoaded","setIsVideoLoaded","error","setError","isLoading","setIsLoading","videoSource","setVideoSource","hasFlipped","setHasFlipped","wasInteractedWith","setWasInteractedWith","starred","setStarred","flip","state","handleInteraction","handleStar","e","stopPropagation","newStarredState","transformGoogleDriveUrl","url","includes","fileId","match","console","log","transformedUrl","handleVideoLoad","handleVideoError","handleVideoStart","handleFlip","target","closest","isGoogleDriveEmbed","shouldHighlight","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","currentUrl","setTimeout","src","width","height","allow","allowFullScreen","style","border","onLoad","controls","playing","onReady","onError","onStart","config","file","attributes","controlsList","disablePictureInPicture","forceVideo","title","_c2","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Flashcard.tsx"],"sourcesContent":["import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';\nimport './Flashcard.css';\nimport axios from 'axios';\n\n// Import ReactPlayer directly to prevent lazy loading issues\nimport ReactPlayer from 'react-player';\n\ninterface FlashcardProps {\n  videoUrl: string;\n  answer: string;\n  showInstructions: boolean;\n  onFirstFlip: () => void;\n  isHighlighted?: boolean;\n  onCardInteraction?: (cardId: string) => void;\n  cardId?: string;\n  isStarred?: boolean;\n  onStarToggle?: (cardId: string, isStarred: boolean) => void;\n}\n\nexport interface FlashcardHandle {\n  flip: (state: boolean) => void;\n}\n\nconst Flashcard = forwardRef<FlashcardHandle, FlashcardProps>(\n  ({ videoUrl, answer, showInstructions, onFirstFlip, isHighlighted = false, onCardInteraction, cardId, isStarred = false, onStarToggle }, ref) => {\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [videoSource, setVideoSource] = useState<string>('');\n  const [hasFlipped, setHasFlipped] = useState(false);\n  const [wasInteractedWith, setWasInteractedWith] = useState(false);\n  const [starred, setStarred] = useState(isStarred);\n\n  // Update internal starred state when prop changes\n  useEffect(() => {\n    setStarred(isStarred);\n  }, [isStarred]);\n\n  // Expose flip method to parent components\n  useImperativeHandle(ref, () => ({\n    flip: (state: boolean) => {\n      setIsFlipped(state);\n      if (!hasFlipped && state) {\n        setHasFlipped(true);\n        onFirstFlip();\n      }\n      // Also count programmatic flips as interaction\n      if (isHighlighted && cardId && onCardInteraction) {\n        handleInteraction();\n      }\n    }\n  }));\n\n  // Handle any interaction with the card\n  const handleInteraction = () => {\n    if (!wasInteractedWith && isHighlighted && cardId && onCardInteraction) {\n      setWasInteractedWith(true);\n      onCardInteraction(cardId);\n    }\n  };\n\n  // Handle starring a card\n  const handleStar = (e: React.MouseEvent) => {\n    e.stopPropagation(); // Prevent card from flipping\n    \n    if (cardId && onStarToggle) {\n      const newStarredState = !starred;\n      setStarred(newStarredState);\n      onStarToggle(cardId, newStarredState);\n    }\n  };\n\n  useEffect(() => {\n    // Transform Google Drive URL to direct video URL\n    const transformGoogleDriveUrl = (url: string): string => {\n      // Check if it's a Google Drive URL\n      if (url.includes('drive.google.com')) {\n        // Extract file ID from URL\n        let fileId = '';\n        \n        // Handle different Google Drive URL formats\n        if (url.includes('drive.google.com/file/d/')) {\n          // Format: https://drive.google.com/file/d/{fileId}/view\n          const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n          if (match && match[1]) {\n            fileId = match[1];\n          }\n        } else if (url.includes('drive.google.com/open?id=')) {\n          // Format: https://drive.google.com/open?id={fileId}\n          const match = url.match(/open\\?id=([^&]+)/);\n          if (match && match[1]) {\n            fileId = match[1];\n          }\n        } else if (url.includes('id=')) {\n          // Format: https://drive.google.com/uc?id={fileId}\n          const match = url.match(/id=([^&]+)/);\n          if (match && match[1]) {\n            fileId = match[1];\n          }\n        }\n        \n        if (fileId) {\n          console.log('Extracted Google Drive file ID:', fileId);\n          // Use embed format which works better than direct download\n          return `https://drive.google.com/file/d/${fileId}/preview`;\n        }\n      }\n      \n      // If not a Google Drive URL or couldn't extract ID, return original\n      return url;\n    };\n\n    // Set video source with transformation if needed\n    if (videoUrl.includes('drive.google.com')) {\n      const transformedUrl = transformGoogleDriveUrl(videoUrl);\n      console.log('Transformed Google Drive URL:', transformedUrl);\n      setVideoSource(transformedUrl);\n    } else {\n      setVideoSource(videoUrl);\n    }\n    \n    console.log('Video URL:', videoUrl);\n  }, [videoUrl]);\n\n  const handleVideoLoad = () => {\n    console.log('Video loaded successfully:', videoSource);\n    setIsVideoLoaded(true);\n    setIsLoading(false);\n    setError(null);\n  };\n\n  const handleVideoError = (e: any) => {\n    console.error('Video error:', e);\n    console.error('Failed URL:', videoSource);\n    setError('Failed to load video. Please check your internet connection and try again.');\n    setIsLoading(false);\n    \n    // Use a reliable fallback video if the main one fails\n    setVideoSource('https://filesamples.com/samples/video/mp4/sample_640x360.mp4');\n  };\n\n  const handleVideoStart = () => {\n    console.log('Video started playing');\n    setIsLoading(false);\n  };\n\n  const handleFlip = (e: React.MouseEvent) => {\n    // Don't flip if clicking on the video container or star button\n    if ((e.target as HTMLElement).closest('.video-content') || \n        (e.target as HTMLElement).closest('.star-button')) {\n      return;\n    }\n    \n    // If this is the first time any card is being flipped, call the parent function\n    if (!hasFlipped) {\n      setHasFlipped(true);\n      onFirstFlip();\n    }\n    \n    setIsFlipped(!isFlipped);\n\n    // Notify parent about the interaction\n    handleInteraction();\n  };\n\n  // Special handling for Google Drive embedded videos\n  const isGoogleDriveEmbed = videoSource.includes('/preview');\n\n  // Determine if the card should appear highlighted\n  const shouldHighlight = isHighlighted && !wasInteractedWith;\n\n  return (\n    <div className={`flashcard-container ${shouldHighlight ? 'highlighted' : ''} ${starred ? 'starred' : ''}`}>\n      <div className={`flashcard ${isFlipped ? 'flipped' : ''}`} onClick={handleFlip}>\n        <div className=\"flashcard-inner\">\n          <div className=\"flashcard-front\">\n            <div className=\"card-content\">\n              <div className=\"card-title\">Sign</div>\n              <div className=\"video-content\">\n                {isLoading && !isGoogleDriveEmbed && (\n                  <div className=\"video-loading\">\n                    <div className=\"loading-spinner\"></div>\n                    <p>Loading video...</p>\n                  </div>\n                )}\n                {error && !isGoogleDriveEmbed && (\n                  <div className=\"video-error\">\n                    <p>{error}</p>\n                    <button \n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setIsLoading(true);\n                        setError(null);\n                        // Try reloading the video\n                        const currentUrl = videoSource;\n                        setVideoSource('');\n                        setTimeout(() => setVideoSource(currentUrl), 100);\n                      }}\n                      className=\"retry-button\"\n                    >\n                      Try Again\n                    </button>\n                  </div>\n                )}\n                {/* For Google Drive embedded videos, use iframe directly */}\n                {isGoogleDriveEmbed ? (\n                  <iframe \n                    src={videoSource}\n                    width=\"100%\" \n                    height=\"100%\" \n                    allow=\"autoplay\" \n                    allowFullScreen\n                    style={{ border: 'none' }}\n                    onLoad={() => {\n                      setIsLoading(false);\n                      setIsVideoLoaded(true);\n                    }}\n                  ></iframe>\n                ) : (\n                  // For regular videos, use ReactPlayer\n                  !error && videoSource && (\n                    <ReactPlayer\n                      url={videoSource}\n                      width=\"100%\"\n                      height=\"100%\"\n                      controls\n                      playing={false}\n                      onReady={handleVideoLoad}\n                      onError={handleVideoError}\n                      onStart={handleVideoStart}\n                      config={{\n                        file: {\n                          attributes: {\n                            controlsList: 'nodownload',\n                            disablePictureInPicture: true\n                          },\n                          forceVideo: true\n                        }\n                      }}\n                    />\n                  )\n                )}\n              </div>\n              {showInstructions && (\n                <div className=\"card-instruction\">Click anywhere outside the video to flip</div>\n              )}\n              <div className=\"star-button-container\">\n                <button\n                  className={`star-button ${starred ? 'starred' : ''}`}\n                  onClick={handleStar}\n                  title={starred ? 'Unstar this card' : 'Star this card'}\n                >\n                  {starred ? '★' : '☆'}\n                </button>\n              </div>\n            </div>\n          </div>\n          <div className=\"flashcard-back\">\n            <div className=\"card-content\">\n              <div className=\"card-title\">Answer</div>\n              <div className=\"answer-content\">\n                <p>{answer}</p>\n              </div>\n              {showInstructions && (\n                <div className=\"card-instruction\">Click to see the sign again</div>\n              )}\n              <div className=\"star-button-container\">\n                <button\n                  className={`star-button ${starred ? 'starred' : ''}`}\n                  onClick={handleStar}\n                  title={starred ? 'Unstar this card' : 'Star this card'}\n                >\n                  {starred ? '★' : '☆'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default Flashcard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}