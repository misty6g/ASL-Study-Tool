{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TestMode = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState('');\n  const [starredCardIds, setStarredCardIds] = useState([]);\n  const [testMode, setTestMode] = useState('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const [viewOnly, setViewOnly] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Fetch starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n        // Add debugging to find issue\n        console.log(\"TestMode: Fetching starred cards...\");\n\n        // Check location state first if starred IDs were passed directly\n        if (location.state && location.state.starredCardIds) {\n          const passedStarredIds = location.state.starredCardIds;\n          console.log('TestMode: Using starred cards passed from navigation:', passedStarredIds);\n          setStarredCardIds(passedStarredIds);\n          setLoadingStarred(false);\n\n          // Set test mode if starredOnly flag is set\n          if (location.state.starredOnly) {\n            console.log(\"TestMode: Setting test mode to starred from navigation state\");\n            setTestMode('starred');\n          }\n          if (location.state.viewOnly) {\n            console.log(\"TestMode: Setting view-only mode from navigation state\");\n            setViewOnly(true);\n          }\n          return; // Exit early with passed values\n        }\n\n        // Check localStorage as second option\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('TestMode: Using localStorage starred cards:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n            setLoadingStarred(false);\n\n            // Check if we should only test starred cards\n            if (location.state) {\n              const state = location.state;\n              if (state.starredOnly) {\n                console.log(\"TestMode: Setting test mode to starred\");\n                setTestMode('starred');\n              }\n              if (state.viewOnly) {\n                console.log(\"TestMode: Setting view-only mode\");\n                setViewOnly(true);\n              }\n            }\n            return; // Exit early with localStorage values\n          } catch (parseErr) {\n            console.error('TestMode: Error parsing starred cards from localStorage:', parseErr);\n          }\n        }\n\n        // Try server as fallback\n        try {\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n          if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n            console.log(\"TestMode: Loaded starred cards from server:\", response.data.cardIds.length);\n            setStarredCardIds(response.data.cardIds || []);\n          } else {\n            console.log('TestMode: No starred cards found on server or localStorage');\n            setStarredCardIds([]);\n          }\n        } catch (serverErr) {\n          console.error(\"TestMode: Error fetching starred cards from server:\", serverErr);\n          setStarredCardIds([]);\n        }\n      } catch (err) {\n        console.error(\"TestMode: Error in starred card fetching logic:\", err);\n        setStarredCardIds([]);\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n    fetchStarredCards();\n\n    // We'll set this in the fetchStarredCards function to ensure it happens\n    // after the cards are loaded\n    // if (location.state && (location.state as any).starredOnly) {\n    //   setTestMode('starred');\n    // }\n  }, [location.state]);\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        console.log(`TestMode: Fetching cards for deck \"${deckId}\" with test mode \"${testMode}\"`);\n        console.log(`TestMode: We have ${starredCardIds.length} starred card IDs`);\n\n        // Special case for testing all starred cards across all decks\n        if (deckId === 'all-decks' && testMode === 'starred') {\n          console.log(\"TestMode: Testing all starred cards across all decks\");\n\n          // Bail early if no starred cards\n          if (starredCardIds.length === 0) {\n            console.log(\"TestMode: No starred cards found, showing empty set\");\n            setCards([]);\n            setLoading(false);\n            return;\n          }\n          try {\n            // Get all decks\n            const usersResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users`);\n            const demoUser = usersResponse.data.find(user => user.email === 'demo@example.com');\n            if (demoUser) {\n              const decksResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/decks/${demoUser.id}`);\n              const allDecks = decksResponse.data;\n              console.log(`TestMode: Found ${allDecks.length} decks to search for starred cards`);\n\n              // Collect cards from all decks\n              let allCards = [];\n              for (const deck of allDecks) {\n                try {\n                  const deckCardsResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deck.id}`);\n                  allCards = [...allCards, ...deckCardsResponse.data];\n                } catch (deckErr) {\n                  console.error(`TestMode: Error fetching cards for deck ${deck.id}:`, deckErr);\n                }\n              }\n              console.log(`TestMode: Found total of ${allCards.length} cards across all decks`);\n              console.log(`TestMode: Filtering for starred cards with IDs:`, starredCardIds);\n\n              // Filter to starred cards only\n              const filteredCards = allCards.filter(card => starredCardIds.includes(card.id));\n              console.log(`TestMode: Filtered to ${filteredCards.length} starred cards across all decks`);\n              if (filteredCards.length === 0) {\n                console.log(\"TestMode: No matching starred cards found in decks\");\n                setCards([]);\n                setLoading(false);\n                return;\n              }\n\n              // Shuffle and set cards\n              const shuffledCards = filteredCards.sort(() => Math.random() - 0.5);\n              console.log(`TestMode: Final count for testing: ${shuffledCards.length} cards`);\n              setCards(shuffledCards);\n            } else {\n              console.error(\"TestMode: Demo user not found\");\n              setCards([]);\n            }\n          } catch (error) {\n            console.error(\"TestMode: Error loading all decks:\", error);\n            setCards([]);\n          }\n          setLoading(false);\n          return; // Exit early\n        }\n\n        // Standard single deck test\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        let fetchedCards = [...response.data];\n        console.log(\"TestMode: Total cards in deck:\", fetchedCards.length);\n        console.log(\"TestMode: Current test mode:\", testMode);\n        console.log(\"TestMode: Starred card IDs:\", starredCardIds);\n\n        // If we're in starred-only mode, filter the cards\n        if (testMode === 'starred') {\n          if (starredCardIds.length === 0) {\n            console.log(\"TestMode: No starred cards found, showing empty set\");\n            fetchedCards = [];\n          } else {\n            const filteredCards = fetchedCards.filter(card => starredCardIds.includes(card.id));\n            console.log(\"TestMode: Filtered to starred cards:\", filteredCards.length);\n            fetchedCards = filteredCards;\n          }\n        }\n\n        // Shuffle the cards for the test\n        const shuffledCards = fetchedCards.sort(() => Math.random() - 0.5);\n        console.log(\"TestMode: Final cards for testing:\", shuffledCards.length);\n        setCards(shuffledCards);\n        setLoading(false);\n      } catch (err) {\n        console.error('TestMode: Failed to load cards:', err);\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    // Make sure to wait for starredCardIds to be loaded\n    if (!loadingStarred) {\n      fetchCards();\n    }\n  }, [deckId, testMode, starredCardIds, loadingStarred]);\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n  const transformGoogleDriveUrl = url => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n\n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    return url;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n      const isCorrect = userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n\n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n\n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n\n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n\n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, {\n              userId: demoUserId\n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      setSubmitted(true);\n    }\n  };\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading test...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this);\n  }\n  if (cards.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No Cards Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), testMode === 'starred' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You don't have any starred cards in this deck yet. Star some cards first or try the full test.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: '#333',\n            padding: '10px',\n            borderRadius: '5px',\n            margin: '20px 0',\n            fontSize: '12px',\n            textAlign: 'left'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Debug Info:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Starred Card IDs: \", starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Deck ID: \", deckId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Test Mode: \", testMode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Loading Starred: \", loadingStarred ? 'true' : 'false']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              // Check localStorage\n              const local = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n              console.log('localStorage starred cards:', local);\n              alert('localStorage starred cards: ' + (local || 'none'));\n            },\n            children: \"Check Local Storage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This deck doesn't have any cards to test with.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this);\n  }\n  if (testComplete || viewOnly) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round(results.correct.length / totalCards * 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container results\",\n      children: [viewOnly ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Starred Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }, this), !viewOnly && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [\"Score: \", score, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"correct-count\",\n            children: [results.correct.length, \" correct\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"incorrect-count\",\n            children: [results.incorrect.length, \" incorrect\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this), viewOnly && cards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"all-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Your Starred Cards (\", cards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"results-list\",\n          children: cards.map(card => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"result-item\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-answer\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: card.answer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 19\n            }, this)\n          }, card.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }, this), !viewOnly && results.incorrect.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"incorrect-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Incorrect Answers (Automatically Starred)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"results-list\",\n          children: results.incorrect.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"result-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Correct answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 21\n              }, this), \" \", card.answer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-user-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Your answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 21\n              }, this), \" \", results.userAnswers[results.correct.length + index]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 19\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-actions\",\n        children: [!viewOnly && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartOver,\n          className: \"start-over-btn\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToDeck,\n          className: \"back-to-deck-btn\",\n          children: \"Back to Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this);\n  }\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-btn\",\n        children: \"\\u2190 Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ASL Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: [currentCardIndex + 1, \" of \", cards.length, testMode === 'starred' && ' (Starred Cards Only)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: videoSource && (videoSource.includes('/preview') ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          allow: \"autoplay\",\n          allowFullScreen: true,\n          style: {\n            border: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          url: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          controls: true,\n          playing: !submitted,\n          config: {\n            file: {\n              attributes: {\n                controlsList: 'nodownload',\n                disablePictureInPicture: true\n              },\n              forceVideo: true\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this), !submitted ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"answer-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"answer\",\n            children: \"What is the sign?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"answer\",\n            type: \"text\",\n            value: userAnswer,\n            onChange: e => setUserAnswer(e.target.value),\n            placeholder: \"Type your answer here\",\n            autoComplete: \"off\",\n            autoFocus: true,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `feedback ${isCorrect ? 'correct' : 'incorrect'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isCorrect ? 'Correct!' : 'Incorrect'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The correct answer is: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 38\n          }, this), !isCorrect && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"auto-starred\",\n            children: \" (Auto-starred for review)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextCard,\n          className: \"next-btn\",\n          children: currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 517,\n    columnNumber: 5\n  }, this);\n};\n_s(TestMode, \"8LNFesQRlyKCQssKI93GtEaJF6I=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = TestMode;\nexport default TestMode;\nvar _c;\n$RefreshReg$(_c, \"TestMode\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","axios","ReactPlayer","LOCAL_STORAGE_STARRED_KEY","jsxDEV","_jsxDEV","Fragment","_Fragment","TestMode","deckId","_s","cards","setCards","loading","setLoading","error","setError","currentCardIndex","setCurrentCardIndex","userAnswer","setUserAnswer","submitted","setSubmitted","testComplete","setTestComplete","results","setResults","correct","incorrect","userAnswers","videoSource","setVideoSource","starredCardIds","setStarredCardIds","testMode","setTestMode","loadingStarred","setLoadingStarred","viewOnly","setViewOnly","navigate","location","fetchStarredCards","demoUserId","console","log","state","passedStarredIds","starredOnly","localStarred","localStorage","getItem","parsedStarred","JSON","parse","parseErr","response","get","process","env","REACT_APP_API_URL","data","cardIds","length","serverErr","err","fetchCards","usersResponse","demoUser","find","user","email","decksResponse","id","allDecks","allCards","deck","deckCardsResponse","deckErr","filteredCards","filter","card","includes","shuffledCards","sort","Math","random","fetchedCards","currentCard","video_url","transformedUrl","transformGoogleDriveUrl","handleKeyPress","e","key","handleNextCard","window","addEventListener","removeEventListener","url","fileId","match","handleSubmit","preventDefault","isCorrect","trim","toLowerCase","answer","prevResults","newStarredIds","setItem","stringify","post","userId","handleBackToDeck","handleStartOver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","background","padding","borderRadius","margin","fontSize","textAlign","join","local","alert","totalCards","score","round","map","index","src","width","height","allow","allowFullScreen","border","controls","playing","config","file","attributes","controlsList","disablePictureInPicture","forceVideo","onSubmit","htmlFor","type","value","onChange","target","placeholder","autoComplete","autoFocus","required","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\n\ninterface Card {\n  id: string;\n  video_url: string;\n  answer: string;\n  deck_id: string;\n}\n\ninterface TestModeProps {\n  deckId: string;\n}\n\nconst TestMode: React.FC<TestModeProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState<{ correct: Card[], incorrect: Card[], userAnswers: string[] }>({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState<string>('');\n  const [starredCardIds, setStarredCardIds] = useState<string[]>([]);\n  const [testMode, setTestMode] = useState<'all' | 'starred'>('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const [viewOnly, setViewOnly] = useState(false);\n  \n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Fetch starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        \n        // Add debugging to find issue\n        console.log(\"TestMode: Fetching starred cards...\");\n        \n        // Check location state first if starred IDs were passed directly\n        if (location.state && (location.state as any).starredCardIds) {\n          const passedStarredIds = (location.state as any).starredCardIds;\n          console.log('TestMode: Using starred cards passed from navigation:', passedStarredIds);\n          setStarredCardIds(passedStarredIds);\n          setLoadingStarred(false);\n          \n          // Set test mode if starredOnly flag is set\n          if ((location.state as any).starredOnly) {\n            console.log(\"TestMode: Setting test mode to starred from navigation state\");\n            setTestMode('starred');\n          }\n          \n          if ((location.state as any).viewOnly) {\n            console.log(\"TestMode: Setting view-only mode from navigation state\");\n            setViewOnly(true);\n          }\n          \n          return; // Exit early with passed values\n        }\n        \n        // Check localStorage as second option\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('TestMode: Using localStorage starred cards:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n            setLoadingStarred(false);\n            \n            // Check if we should only test starred cards\n            if (location.state) {\n              const state = location.state as any;\n              if (state.starredOnly) {\n                console.log(\"TestMode: Setting test mode to starred\");\n                setTestMode('starred');\n              }\n              if (state.viewOnly) {\n                console.log(\"TestMode: Setting view-only mode\");\n                setViewOnly(true);\n              }\n            }\n            return; // Exit early with localStorage values\n          } catch (parseErr) {\n            console.error('TestMode: Error parsing starred cards from localStorage:', parseErr);\n          }\n        }\n        \n        // Try server as fallback\n        try {\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n          \n          if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n            console.log(\"TestMode: Loaded starred cards from server:\", response.data.cardIds.length);\n            setStarredCardIds(response.data.cardIds || []);\n          } else {\n            console.log('TestMode: No starred cards found on server or localStorage');\n            setStarredCardIds([]);\n          }\n        } catch (serverErr) {\n          console.error(\"TestMode: Error fetching starred cards from server:\", serverErr);\n          setStarredCardIds([]);\n        }\n      } catch (err) {\n        console.error(\"TestMode: Error in starred card fetching logic:\", err);\n        setStarredCardIds([]);\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n\n    fetchStarredCards();\n    \n    // We'll set this in the fetchStarredCards function to ensure it happens\n    // after the cards are loaded\n    // if (location.state && (location.state as any).starredOnly) {\n    //   setTestMode('starred');\n    // }\n  }, [location.state]);\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        console.log(`TestMode: Fetching cards for deck \"${deckId}\" with test mode \"${testMode}\"`);\n        console.log(`TestMode: We have ${starredCardIds.length} starred card IDs`);\n        \n        // Special case for testing all starred cards across all decks\n        if (deckId === 'all-decks' && testMode === 'starred') {\n          console.log(\"TestMode: Testing all starred cards across all decks\");\n          \n          // Bail early if no starred cards\n          if (starredCardIds.length === 0) {\n            console.log(\"TestMode: No starred cards found, showing empty set\");\n            setCards([]);\n            setLoading(false);\n            return;\n          }\n          \n          try {\n            // Get all decks\n            const usersResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users`);\n            const demoUser = usersResponse.data.find((user: any) => user.email === 'demo@example.com');\n            \n            if (demoUser) {\n              const decksResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/decks/${demoUser.id}`);\n              const allDecks = decksResponse.data;\n              console.log(`TestMode: Found ${allDecks.length} decks to search for starred cards`);\n              \n              // Collect cards from all decks\n              let allCards: Card[] = [];\n              for (const deck of allDecks) {\n                try {\n                  const deckCardsResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deck.id}`);\n                  allCards = [...allCards, ...deckCardsResponse.data];\n                } catch (deckErr) {\n                  console.error(`TestMode: Error fetching cards for deck ${deck.id}:`, deckErr);\n                }\n              }\n              \n              console.log(`TestMode: Found total of ${allCards.length} cards across all decks`);\n              console.log(`TestMode: Filtering for starred cards with IDs:`, starredCardIds);\n              \n              // Filter to starred cards only\n              const filteredCards = allCards.filter(card => starredCardIds.includes(card.id));\n              console.log(`TestMode: Filtered to ${filteredCards.length} starred cards across all decks`);\n              \n              if (filteredCards.length === 0) {\n                console.log(\"TestMode: No matching starred cards found in decks\");\n                setCards([]);\n                setLoading(false);\n                return;\n              }\n              \n              // Shuffle and set cards\n              const shuffledCards = filteredCards.sort(() => Math.random() - 0.5);\n              console.log(`TestMode: Final count for testing: ${shuffledCards.length} cards`);\n              setCards(shuffledCards);\n            } else {\n              console.error(\"TestMode: Demo user not found\");\n              setCards([]);\n            }\n          } catch (error) {\n            console.error(\"TestMode: Error loading all decks:\", error);\n            setCards([]);\n          }\n          \n          setLoading(false);\n          return; // Exit early\n        }\n        \n        // Standard single deck test\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        let fetchedCards = [...response.data];\n        \n        console.log(\"TestMode: Total cards in deck:\", fetchedCards.length);\n        console.log(\"TestMode: Current test mode:\", testMode);\n        console.log(\"TestMode: Starred card IDs:\", starredCardIds);\n        \n        // If we're in starred-only mode, filter the cards\n        if (testMode === 'starred') {\n          if (starredCardIds.length === 0) {\n            console.log(\"TestMode: No starred cards found, showing empty set\");\n            fetchedCards = [];\n          } else {\n            const filteredCards = fetchedCards.filter(card => starredCardIds.includes(card.id));\n            console.log(\"TestMode: Filtered to starred cards:\", filteredCards.length);\n            fetchedCards = filteredCards;\n          }\n        }\n        \n        // Shuffle the cards for the test\n        const shuffledCards = fetchedCards.sort(() => Math.random() - 0.5);\n        console.log(\"TestMode: Final cards for testing:\", shuffledCards.length);\n        setCards(shuffledCards);\n        setLoading(false);\n      } catch (err) {\n        console.error('TestMode: Failed to load cards:', err);\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    // Make sure to wait for starredCardIds to be loaded\n    if (!loadingStarred) {\n      fetchCards();\n    }\n  }, [deckId, testMode, starredCardIds, loadingStarred]);\n\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n\n  const transformGoogleDriveUrl = (url: string): string => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n      \n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      \n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    \n    return url;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n      const isCorrect = userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n      \n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n        \n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n            \n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n            \n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n            \n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, { \n              userId: demoUserId \n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      \n      setSubmitted(true);\n    }\n  };\n\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"test-container loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading test...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"test-container error\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (cards.length === 0) {\n    return (\n      <div className=\"test-container error\">\n        <h2>No Cards Available</h2>\n        {testMode === 'starred' ? (\n          <>\n            <p>You don't have any starred cards in this deck yet. Star some cards first or try the full test.</p>\n            {/* Debug information */}\n            <div style={{ \n              background: '#333', \n              padding: '10px', \n              borderRadius: '5px', \n              margin: '20px 0', \n              fontSize: '12px',\n              textAlign: 'left'\n            }}>\n              <p>Debug Info:</p>\n              <p>Starred Card IDs: {starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None'}</p>\n              <p>Deck ID: {deckId}</p>\n              <p>Test Mode: {testMode}</p>\n              <p>Loading Starred: {loadingStarred ? 'true' : 'false'}</p>\n              <button onClick={() => {\n                // Check localStorage\n                const local = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n                console.log('localStorage starred cards:', local);\n                alert('localStorage starred cards: ' + (local || 'none'));\n              }}>Check Local Storage</button>\n            </div>\n          </>\n        ) : (\n          <p>This deck doesn't have any cards to test with.</p>\n        )}\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (testComplete || viewOnly) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round((results.correct.length / totalCards) * 100);\n    \n    return (\n      <div className=\"test-container results\">\n        {viewOnly ? (\n          <h2>All Starred Cards</h2>\n        ) : (\n          <h2>Test Complete!</h2>\n        )}\n        \n        {!viewOnly && (\n          <div className=\"test-summary\">\n            <div className=\"score\">Score: {score}%</div>\n            <div className=\"stats\">\n              <div className=\"correct-count\">{results.correct.length} correct</div>\n              <div className=\"incorrect-count\">{results.incorrect.length} incorrect</div>\n            </div>\n          </div>\n        )}\n        \n        {/* Show all cards in view mode */}\n        {viewOnly && cards.length > 0 && (\n          <div className=\"all-cards\">\n            <h3>Your Starred Cards ({cards.length})</h3>\n            <ul className=\"results-list\">\n              {cards.map((card) => (\n                <li key={card.id} className=\"result-item\">\n                  <div className=\"result-answer\">\n                    <strong>{card.answer}</strong>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        {/* Show incorrect answers in test mode */}\n        {!viewOnly && results.incorrect.length > 0 && (\n          <div className=\"incorrect-cards\">\n            <h3>Incorrect Answers (Automatically Starred)</h3>\n            <ul className=\"results-list\">\n              {results.incorrect.map((card, index) => (\n                <li key={card.id} className=\"result-item\">\n                  <div className=\"result-answer\">\n                    <strong>Correct answer:</strong> {card.answer}\n                  </div>\n                  <div className=\"result-user-answer\">\n                    <strong>Your answer:</strong> {results.userAnswers[results.correct.length + index]}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        <div className=\"test-actions\">\n          {!viewOnly && (\n            <button onClick={handleStartOver} className=\"start-over-btn\">\n              Start Over\n            </button>\n          )}\n          <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n            Back to Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  \n  return (\n    <div className=\"test-container\">\n      <div className=\"test-header\">\n        <button onClick={handleBackToDeck} className=\"back-btn\">\n          &larr; Back to Deck\n        </button>\n        <h1>ASL Test</h1>\n        <div className=\"progress\">\n          {currentCardIndex + 1} of {cards.length}\n          {testMode === 'starred' && ' (Starred Cards Only)'}\n        </div>\n      </div>\n\n      <div className=\"test-content\">\n        <div className=\"video-container\">\n          {videoSource && (\n            videoSource.includes('/preview') ? (\n              <iframe \n                src={videoSource}\n                width=\"100%\" \n                height=\"100%\" \n                allow=\"autoplay\" \n                allowFullScreen\n                style={{ border: 'none' }}\n              ></iframe>\n            ) : (\n              <ReactPlayer\n                url={videoSource}\n                width=\"100%\"\n                height=\"100%\"\n                controls\n                playing={!submitted}\n                config={{\n                  file: {\n                    attributes: {\n                      controlsList: 'nodownload',\n                      disablePictureInPicture: true\n                    },\n                    forceVideo: true\n                  }\n                }}\n              />\n            )\n          )}\n        </div>\n\n        {!submitted ? (\n          <form onSubmit={handleSubmit} className=\"answer-form\">\n            <div className=\"input-group\">\n              <label htmlFor=\"answer\">What is the sign?</label>\n              <input\n                id=\"answer\"\n                type=\"text\"\n                value={userAnswer}\n                onChange={(e) => setUserAnswer(e.target.value)}\n                placeholder=\"Type your answer here\"\n                autoComplete=\"off\"\n                autoFocus\n                required\n              />\n            </div>\n            <button type=\"submit\" className=\"submit-btn\">\n              Submit\n            </button>\n          </form>\n        ) : (\n          <div className={`feedback ${isCorrect ? 'correct' : 'incorrect'}`}>\n            <h2>\n              {isCorrect ? 'Correct!' : 'Incorrect'}\n            </h2>\n            <p>\n              The correct answer is: <strong>{currentCard.answer}</strong>\n              {!isCorrect && <span className=\"auto-starred\"> (Auto-starred for review)</span>}\n            </p>\n            <button onClick={handleNextCard} className=\"next-btn\">\n              {currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TestMode; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}