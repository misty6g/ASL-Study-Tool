{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Deck.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, createRef, useCallback } from 'react';\nimport Flashcard from './Flashcard';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './Deck.css'; // We'll create this for the back button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARDS_PER_PAGE = 20; // Number of cards to display at once\n\nconst Deck = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [visibleCards, setVisibleCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showInstructions, setShowInstructions] = useState(() => {\n    // Check localStorage for saved preference\n    const savedPreference = localStorage.getItem('showFlipInstructions');\n    return savedPreference === null ? true : savedPreference === 'true';\n  });\n  const [areAllFlipped, setAreAllFlipped] = useState(false);\n  const [highlightedCardId, setHighlightedCardId] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMoreCards, setHasMoreCards] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const cardRefs = useRef([]);\n  const cardContainerRefs = useRef([]);\n  const observerRef = useRef(null);\n  const loadMoreTriggerRef = useRef(null);\n\n  // Load more cards when user scrolls near the bottom\n  const loadMoreCards = useCallback(() => {\n    if (!loading && hasMoreCards) {\n      const nextPage = currentPage + 1;\n      const startIndex = (nextPage - 1) * CARDS_PER_PAGE;\n      const endIndex = startIndex + CARDS_PER_PAGE;\n\n      // Check if we have more cards to load\n      if (startIndex < cards.length) {\n        const nextBatch = cards.slice(startIndex, endIndex);\n        setVisibleCards(prevCards => [...prevCards, ...nextBatch]);\n        setCurrentPage(nextPage);\n        setHasMoreCards(endIndex < cards.length);\n      } else {\n        setHasMoreCards(false);\n      }\n    }\n  }, [loading, hasMoreCards, currentPage, cards]);\n\n  // Set up intersection observer for infinite scrolling\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '100px',\n      threshold: 0.1\n    };\n    observerRef.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        loadMoreCards();\n      }\n    }, options);\n    if (loadMoreTriggerRef.current) {\n      observerRef.current.observe(loadMoreTriggerRef.current);\n    }\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [loadMoreCards]);\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        const fetchedCards = response.data;\n        setCards(fetchedCards);\n\n        // Initialize with first page of cards\n        const initialCards = fetchedCards.slice(0, CARDS_PER_PAGE);\n        setVisibleCards(initialCards);\n        setHasMoreCards(fetchedCards.length > CARDS_PER_PAGE);\n\n        // Create refs for visible cards\n        cardRefs.current = Array(fetchedCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n        cardContainerRefs.current = Array(fetchedCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n        setLoading(false);\n\n        // Check if coming from search with a highlight card ID\n        if (location.state) {\n          const {\n            highlightCardId\n          } = location.state;\n          if (highlightCardId) {\n            setHighlightedCardId(highlightCardId);\n\n            // Find the card index\n            const cardIndex = fetchedCards.findIndex(card => card.id === highlightCardId);\n\n            // Calculate what page the card is on\n            if (cardIndex !== -1) {\n              const cardPage = Math.floor(cardIndex / CARDS_PER_PAGE) + 1;\n\n              // Load all pages up to the card's page\n              if (cardPage > 1) {\n                const cardsToShow = fetchedCards.slice(0, cardPage * CARDS_PER_PAGE);\n                setVisibleCards(cardsToShow);\n                setCurrentPage(cardPage);\n                setHasMoreCards(cardPage * CARDS_PER_PAGE < fetchedCards.length);\n              }\n\n              // Wait for rendering then scroll to the highlighted card\n              setTimeout(() => {\n                var _cardContainerRefs$cu;\n                if ((_cardContainerRefs$cu = cardContainerRefs.current[cardIndex]) !== null && _cardContainerRefs$cu !== void 0 && _cardContainerRefs$cu.current) {\n                  var _cardContainerRefs$cu2;\n                  (_cardContainerRefs$cu2 = cardContainerRefs.current[cardIndex].current) === null || _cardContainerRefs$cu2 === void 0 ? void 0 : _cardContainerRefs$cu2.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                  });\n                }\n              }, 300);\n            }\n          }\n        }\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n    fetchCards();\n  }, [deckId, location.state]);\n  const handleBackClick = () => {\n    navigate('/');\n  };\n  const handleTestClick = () => {\n    navigate(`/test/${deckId}`);\n  };\n  const handleFirstFlip = () => {\n    // When any card is flipped for the first time, hide instructions on all cards\n    setShowInstructions(false);\n    // Save preference to localStorage\n    localStorage.setItem('showFlipInstructions', 'false');\n  };\n  const handleFlipAll = () => {\n    const newFlipState = !areAllFlipped;\n    cardRefs.current.forEach(ref => {\n      if (ref.current) {\n        ref.current.flip(newFlipState);\n      }\n    });\n    setAreAllFlipped(newFlipState);\n  };\n  const handleCardInteraction = cardId => {\n    // Remove the highlighting when card is interacted with\n    setHighlightedCardId(null);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deck-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        title: \"Back to Home\",\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flip-all-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"test-button\",\n        onClick: handleFlipAll,\n        title: areAllFlipped ? \"Show Videos\" : \"Show Answers\",\n        children: areAllFlipped ? \"Show Videos\" : \"Show Answers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"test-button\",\n        onClick: handleTestClick,\n        title: \"Start Test\",\n        children: \"Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-grid\",\n      children: [visibleCards.map((card, index) => {\n        const cardIndex = cards.findIndex(c => c.id === card.id);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: cardContainerRefs.current[cardIndex],\n          children: /*#__PURE__*/_jsxDEV(Flashcard, {\n            ref: cardRefs.current[cardIndex],\n            videoUrl: card.video_url,\n            answer: card.answer,\n            showInstructions: showInstructions,\n            onFirstFlip: handleFirstFlip,\n            isHighlighted: card.id === highlightedCardId,\n            onCardInteraction: handleCardInteraction,\n            cardId: card.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }, this);\n      }), hasMoreCards && /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreTriggerRef,\n        className: \"load-more-trigger\",\n        style: {\n          width: '100%',\n          height: '20px',\n          margin: '20px 0'\n        },\n        children: loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"Loading more cards...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(Deck, \"4AY15lPu7D4VUsA951f38xGwdgE=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useEffect","useState","useRef","createRef","useCallback","Flashcard","axios","useNavigate","useLocation","jsxDEV","_jsxDEV","CARDS_PER_PAGE","Deck","deckId","_s","cards","setCards","visibleCards","setVisibleCards","loading","setLoading","error","setError","showInstructions","setShowInstructions","savedPreference","localStorage","getItem","areAllFlipped","setAreAllFlipped","highlightedCardId","setHighlightedCardId","currentPage","setCurrentPage","hasMoreCards","setHasMoreCards","navigate","location","cardRefs","cardContainerRefs","observerRef","loadMoreTriggerRef","loadMoreCards","nextPage","startIndex","endIndex","length","nextBatch","slice","prevCards","options","root","rootMargin","threshold","current","IntersectionObserver","entries","isIntersecting","observe","disconnect","fetchCards","response","get","process","env","REACT_APP_API_URL","fetchedCards","data","initialCards","Array","fill","map","state","highlightCardId","cardIndex","findIndex","card","id","cardPage","Math","floor","cardsToShow","setTimeout","_cardContainerRefs$cu","_cardContainerRefs$cu2","scrollIntoView","behavior","block","err","handleBackClick","handleTestClick","handleFirstFlip","setItem","handleFlipAll","newFlipState","forEach","ref","flip","handleCardInteraction","cardId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","index","c","videoUrl","video_url","answer","onFirstFlip","isHighlighted","onCardInteraction","style","width","height","margin","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Deck.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, createRef, useCallback } from 'react';\nimport Flashcard, { FlashcardHandle } from './Flashcard';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './Deck.css'; // We'll create this for the back button\n\ninterface Card {\n  id: string;\n  video_url: string;\n  answer: string;\n}\n\ninterface DeckProps {\n  deckId: string;\n}\n\nconst CARDS_PER_PAGE = 20; // Number of cards to display at once\n\nconst Deck: React.FC<DeckProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [visibleCards, setVisibleCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showInstructions, setShowInstructions] = useState(() => {\n    // Check localStorage for saved preference\n    const savedPreference = localStorage.getItem('showFlipInstructions');\n    return savedPreference === null ? true : savedPreference === 'true';\n  });\n  const [areAllFlipped, setAreAllFlipped] = useState(false);\n  const [highlightedCardId, setHighlightedCardId] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMoreCards, setHasMoreCards] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const cardRefs = useRef<(React.RefObject<FlashcardHandle>)[]>([]);\n  const cardContainerRefs = useRef<(React.RefObject<HTMLDivElement>)[]>([]);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const loadMoreTriggerRef = useRef<HTMLDivElement>(null);\n\n  // Load more cards when user scrolls near the bottom\n  const loadMoreCards = useCallback(() => {\n    if (!loading && hasMoreCards) {\n      const nextPage = currentPage + 1;\n      const startIndex = (nextPage - 1) * CARDS_PER_PAGE;\n      const endIndex = startIndex + CARDS_PER_PAGE;\n      \n      // Check if we have more cards to load\n      if (startIndex < cards.length) {\n        const nextBatch = cards.slice(startIndex, endIndex);\n        setVisibleCards(prevCards => [...prevCards, ...nextBatch]);\n        setCurrentPage(nextPage);\n        setHasMoreCards(endIndex < cards.length);\n      } else {\n        setHasMoreCards(false);\n      }\n    }\n  }, [loading, hasMoreCards, currentPage, cards]);\n\n  // Set up intersection observer for infinite scrolling\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '100px',\n      threshold: 0.1\n    };\n    \n    observerRef.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        loadMoreCards();\n      }\n    }, options);\n    \n    if (loadMoreTriggerRef.current) {\n      observerRef.current.observe(loadMoreTriggerRef.current);\n    }\n    \n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [loadMoreCards]);\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        const fetchedCards = response.data;\n        setCards(fetchedCards);\n        \n        // Initialize with first page of cards\n        const initialCards = fetchedCards.slice(0, CARDS_PER_PAGE);\n        setVisibleCards(initialCards);\n        setHasMoreCards(fetchedCards.length > CARDS_PER_PAGE);\n        \n        // Create refs for visible cards\n        cardRefs.current = Array(fetchedCards.length)\n          .fill(null)\n          .map(() => createRef<FlashcardHandle>() as React.RefObject<FlashcardHandle>);\n\n        cardContainerRefs.current = Array(fetchedCards.length)\n          .fill(null)\n          .map(() => createRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>);\n        \n        setLoading(false);\n        \n        // Check if coming from search with a highlight card ID\n        if (location.state) {\n          const { highlightCardId } = location.state as { fromSearch?: boolean, highlightCardId?: string };\n          \n          if (highlightCardId) {\n            setHighlightedCardId(highlightCardId);\n            \n            // Find the card index\n            const cardIndex = fetchedCards.findIndex((card: Card) => card.id === highlightCardId);\n            \n            // Calculate what page the card is on\n            if (cardIndex !== -1) {\n              const cardPage = Math.floor(cardIndex / CARDS_PER_PAGE) + 1;\n              \n              // Load all pages up to the card's page\n              if (cardPage > 1) {\n                const cardsToShow = fetchedCards.slice(0, cardPage * CARDS_PER_PAGE);\n                setVisibleCards(cardsToShow);\n                setCurrentPage(cardPage);\n                setHasMoreCards(cardPage * CARDS_PER_PAGE < fetchedCards.length);\n              }\n              \n              // Wait for rendering then scroll to the highlighted card\n              setTimeout(() => {\n                if (cardContainerRefs.current[cardIndex]?.current) {\n                  cardContainerRefs.current[cardIndex].current?.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                  });\n                }\n              }, 300);\n            }\n          }\n        }\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    fetchCards();\n  }, [deckId, location.state]);\n\n  const handleBackClick = () => {\n    navigate('/');\n  };\n\n  const handleTestClick = () => {\n    navigate(`/test/${deckId}`);\n  };\n\n  const handleFirstFlip = () => {\n    // When any card is flipped for the first time, hide instructions on all cards\n    setShowInstructions(false);\n    // Save preference to localStorage\n    localStorage.setItem('showFlipInstructions', 'false');\n  };\n\n  const handleFlipAll = () => {\n    const newFlipState = !areAllFlipped;\n    cardRefs.current.forEach(ref => {\n      if (ref.current) {\n        ref.current.flip(newFlipState);\n      }\n    });\n    setAreAllFlipped(newFlipState);\n  };\n\n  const handleCardInteraction = (cardId: string) => {\n    // Remove the highlighting when card is interacted with\n    setHighlightedCardId(null);\n  };\n\n  if (loading) return (\n    <div className=\"loading-container\">\n      <div>Loading...</div>\n    </div>\n  );\n  \n  if (error) return (\n    <div className=\"error-container\">\n      <div>Error: {error}</div>\n    </div>\n  );\n\n  return (\n    <div className=\"deck-container\">\n      <div className=\"back-button-container\">\n        <button className=\"back-button\" onClick={handleBackClick} title=\"Back to Home\">\n          &#8592;\n        </button>\n      </div>\n      <div className=\"flip-all-button-container\">\n        <button className=\"test-button\" onClick={handleFlipAll} title={areAllFlipped ? \"Show Videos\" : \"Show Answers\"}>\n          {areAllFlipped ? \"Show Videos\" : \"Show Answers\"}\n        </button>\n      </div>\n      <div className=\"test-button-container\">\n        <button className=\"test-button\" onClick={handleTestClick} title=\"Start Test\">\n          Test\n        </button>\n      </div>\n      \n      <div className=\"cards-grid\">\n        {visibleCards.map((card, index) => {\n          const cardIndex = cards.findIndex(c => c.id === card.id);\n          return (\n            <div key={card.id} ref={cardContainerRefs.current[cardIndex]}>\n              <Flashcard\n                ref={cardRefs.current[cardIndex]}\n                videoUrl={card.video_url}\n                answer={card.answer}\n                showInstructions={showInstructions}\n                onFirstFlip={handleFirstFlip}\n                isHighlighted={card.id === highlightedCardId}\n                onCardInteraction={handleCardInteraction}\n                cardId={card.id}\n              />\n            </div>\n          );\n        })}\n        \n        {/* Loading trigger element */}\n        {hasMoreCards && (\n          <div \n            ref={loadMoreTriggerRef} \n            className=\"load-more-trigger\"\n            style={{ width: '100%', height: '20px', margin: '20px 0' }}\n          >\n            {loading && <div className=\"loading-indicator\">Loading more cards...</div>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Deck; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}