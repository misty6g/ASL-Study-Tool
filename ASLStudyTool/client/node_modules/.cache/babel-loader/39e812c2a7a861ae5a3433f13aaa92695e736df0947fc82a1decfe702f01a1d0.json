{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TestMode = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState('');\n  const [starredCardIds, setStarredCardIds] = useState([]);\n  const [testMode, setTestMode] = useState('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Fetch starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n        // Add debugging to find issue\n        console.log(\"TestMode: Fetching starred cards...\");\n\n        // Check localStorage first since we know it works\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('TestMode: Using localStorage starred cards:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n            setLoadingStarred(false);\n\n            // Check if we should only test starred cards\n            if (location.state && location.state.starredOnly) {\n              console.log(\"TestMode: Setting test mode to starred\");\n              setTestMode('starred');\n            }\n            return; // Exit early with localStorage values\n          } catch (parseErr) {\n            console.error('TestMode: Error parsing starred cards from localStorage:', parseErr);\n          }\n        }\n\n        // Try server as fallback\n        try {\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n          if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n            console.log(\"TestMode: Loaded starred cards from server:\", response.data.cardIds.length);\n            setStarredCardIds(response.data.cardIds || []);\n          } else {\n            console.log('TestMode: No starred cards found on server or localStorage');\n            setStarredCardIds([]);\n          }\n        } catch (serverErr) {\n          console.error(\"TestMode: Error fetching starred cards from server:\", serverErr);\n          setStarredCardIds([]);\n        }\n      } catch (err) {\n        console.error(\"TestMode: Error in starred card fetching logic:\", err);\n        setStarredCardIds([]);\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n    fetchStarredCards();\n\n    // We'll set this in the fetchStarredCards function to ensure it happens\n    // after the cards are loaded\n    // if (location.state && (location.state as any).starredOnly) {\n    //   setTestMode('starred');\n    // }\n  }, [location.state]);\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        // Special case for testing all starred cards across all decks\n        if (deckId === 'all-decks' && testMode === 'starred') {\n          console.log(\"Testing all starred cards across all decks\");\n\n          // Get all decks\n          const usersResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users`);\n          const demoUser = usersResponse.data.find(user => user.email === 'demo@example.com');\n          if (demoUser) {\n            const decksResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/decks/${demoUser.id}`);\n            const allDecks = decksResponse.data;\n            console.log(`Found ${allDecks.length} decks to search for starred cards`);\n\n            // Collect cards from all decks\n            let allCards = [];\n            for (const deck of allDecks) {\n              try {\n                const deckCardsResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deck.id}`);\n                allCards = [...allCards, ...deckCardsResponse.data];\n              } catch (deckErr) {\n                console.error(`Error fetching cards for deck ${deck.id}:`, deckErr);\n              }\n            }\n            console.log(`Found total of ${allCards.length} cards across all decks`);\n\n            // Filter to starred cards only\n            if (starredCardIds.length === 0) {\n              console.log(\"No starred cards found, showing empty set\");\n              allCards = [];\n            } else {\n              const filteredCards = allCards.filter(card => starredCardIds.includes(card.id));\n              console.log(`Filtered to ${filteredCards.length} starred cards across all decks`);\n              allCards = filteredCards;\n            }\n\n            // Shuffle and set cards\n            const shuffledCards = allCards.sort(() => Math.random() - 0.5);\n            console.log(`Final count for testing: ${shuffledCards.length} cards`);\n            setCards(shuffledCards);\n          }\n          setLoading(false);\n          return; // Exit early\n        }\n\n        // Standard single deck test\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        let fetchedCards = [...response.data];\n        console.log(\"Total cards in deck:\", fetchedCards.length);\n        console.log(\"Current test mode:\", testMode);\n        console.log(\"Starred card IDs:\", starredCardIds);\n\n        // If we're in starred-only mode, filter the cards\n        if (testMode === 'starred') {\n          if (starredCardIds.length === 0) {\n            console.log(\"No starred cards found, showing empty set\");\n            fetchedCards = [];\n          } else {\n            const filteredCards = fetchedCards.filter(card => starredCardIds.includes(card.id));\n            console.log(\"Filtered to starred cards:\", filteredCards.length);\n            fetchedCards = filteredCards;\n          }\n        }\n\n        // Shuffle the cards for the test\n        const shuffledCards = fetchedCards.sort(() => Math.random() - 0.5);\n        console.log(\"Final cards for testing:\", shuffledCards.length);\n        setCards(shuffledCards);\n        setLoading(false);\n      } catch (err) {\n        console.error('Failed to load cards:', err);\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    // Make sure to wait for starredCardIds to be loaded\n    if (!loadingStarred) {\n      fetchCards();\n    }\n  }, [deckId, testMode, starredCardIds, loadingStarred]);\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n  const transformGoogleDriveUrl = url => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n\n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    return url;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n      const isCorrect = userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n\n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n\n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n\n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n\n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, {\n              userId: demoUserId\n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      setSubmitted(true);\n    }\n  };\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading test...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this);\n  }\n  if (cards.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No Cards Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), testMode === 'starred' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You don't have any starred cards in this deck yet. Star some cards first or try the full test.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: '#333',\n            padding: '10px',\n            borderRadius: '5px',\n            margin: '20px 0',\n            fontSize: '12px',\n            textAlign: 'left'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Debug Info:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Starred Card IDs: \", starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Deck ID: \", deckId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Test Mode: \", testMode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Loading Starred: \", loadingStarred ? 'true' : 'false']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              // Check localStorage\n              const local = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n              console.log('localStorage starred cards:', local);\n              alert('localStorage starred cards: ' + (local || 'none'));\n            },\n            children: \"Check Local Storage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This deck doesn't have any cards to test with.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this);\n  }\n  if (testComplete) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round(results.correct.length / totalCards * 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [\"Score: \", score, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"correct-count\",\n            children: [results.correct.length, \" correct\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"incorrect-count\",\n            children: [results.incorrect.length, \" incorrect\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), results.incorrect.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"incorrect-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Incorrect Answers (Automatically Starred)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"results-list\",\n          children: results.incorrect.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"result-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Correct answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 21\n              }, this), \" \", card.answer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-user-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Your answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 21\n              }, this), \" \", results.userAnswers[results.correct.length + index]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 19\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartOver,\n          className: \"start-over-btn\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToDeck,\n          className: \"back-to-deck-btn\",\n          children: \"Back to Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this);\n  }\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-btn\",\n        children: \"\\u2190 Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ASL Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: [currentCardIndex + 1, \" of \", cards.length, testMode === 'starred' && ' (Starred Cards Only)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: videoSource && (videoSource.includes('/preview') ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          allow: \"autoplay\",\n          allowFullScreen: true,\n          style: {\n            border: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          url: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          controls: true,\n          playing: !submitted,\n          config: {\n            file: {\n              attributes: {\n                controlsList: 'nodownload',\n                disablePictureInPicture: true\n              },\n              forceVideo: true\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this), !submitted ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"answer-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"answer\",\n            children: \"What is the sign?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"answer\",\n            type: \"text\",\n            value: userAnswer,\n            onChange: e => setUserAnswer(e.target.value),\n            placeholder: \"Type your answer here\",\n            autoComplete: \"off\",\n            autoFocus: true,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `feedback ${isCorrect ? 'correct' : 'incorrect'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isCorrect ? 'Correct!' : 'Incorrect'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The correct answer is: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 38\n          }, this), !isCorrect && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"auto-starred\",\n            children: \" (Auto-starred for review)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextCard,\n          className: \"next-btn\",\n          children: currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 441,\n    columnNumber: 5\n  }, this);\n};\n_s(TestMode, \"djjkJGMFxtav8X2ekIPnAY62yjc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = TestMode;\nexport default TestMode;\nvar _c;\n$RefreshReg$(_c, \"TestMode\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","axios","ReactPlayer","LOCAL_STORAGE_STARRED_KEY","jsxDEV","_jsxDEV","Fragment","_Fragment","TestMode","deckId","_s","cards","setCards","loading","setLoading","error","setError","currentCardIndex","setCurrentCardIndex","userAnswer","setUserAnswer","submitted","setSubmitted","testComplete","setTestComplete","results","setResults","correct","incorrect","userAnswers","videoSource","setVideoSource","starredCardIds","setStarredCardIds","testMode","setTestMode","loadingStarred","setLoadingStarred","navigate","location","fetchStarredCards","demoUserId","console","log","localStarred","localStorage","getItem","parsedStarred","JSON","parse","state","starredOnly","parseErr","response","get","process","env","REACT_APP_API_URL","data","cardIds","length","serverErr","err","fetchCards","usersResponse","demoUser","find","user","email","decksResponse","id","allDecks","allCards","deck","deckCardsResponse","deckErr","filteredCards","filter","card","includes","shuffledCards","sort","Math","random","fetchedCards","currentCard","video_url","transformedUrl","transformGoogleDriveUrl","handleKeyPress","e","key","handleNextCard","window","addEventListener","removeEventListener","url","fileId","match","handleSubmit","preventDefault","isCorrect","trim","toLowerCase","answer","prevResults","newStarredIds","setItem","stringify","post","userId","handleBackToDeck","handleStartOver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","background","padding","borderRadius","margin","fontSize","textAlign","join","local","alert","totalCards","score","round","map","index","src","width","height","allow","allowFullScreen","border","controls","playing","config","file","attributes","controlsList","disablePictureInPicture","forceVideo","onSubmit","htmlFor","type","value","onChange","target","placeholder","autoComplete","autoFocus","required","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\n\ninterface Card {\n  id: string;\n  video_url: string;\n  answer: string;\n  deck_id: string;\n}\n\ninterface TestModeProps {\n  deckId: string;\n}\n\nconst TestMode: React.FC<TestModeProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState<{ correct: Card[], incorrect: Card[], userAnswers: string[] }>({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState<string>('');\n  const [starredCardIds, setStarredCardIds] = useState<string[]>([]);\n  const [testMode, setTestMode] = useState<'all' | 'starred'>('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  \n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Fetch starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        \n        // Add debugging to find issue\n        console.log(\"TestMode: Fetching starred cards...\");\n        \n        // Check localStorage first since we know it works\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('TestMode: Using localStorage starred cards:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n            setLoadingStarred(false);\n            \n            // Check if we should only test starred cards\n            if (location.state && (location.state as any).starredOnly) {\n              console.log(\"TestMode: Setting test mode to starred\");\n              setTestMode('starred');\n            }\n            return; // Exit early with localStorage values\n          } catch (parseErr) {\n            console.error('TestMode: Error parsing starred cards from localStorage:', parseErr);\n          }\n        }\n        \n        // Try server as fallback\n        try {\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n          \n          if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n            console.log(\"TestMode: Loaded starred cards from server:\", response.data.cardIds.length);\n            setStarredCardIds(response.data.cardIds || []);\n          } else {\n            console.log('TestMode: No starred cards found on server or localStorage');\n            setStarredCardIds([]);\n          }\n        } catch (serverErr) {\n          console.error(\"TestMode: Error fetching starred cards from server:\", serverErr);\n          setStarredCardIds([]);\n        }\n      } catch (err) {\n        console.error(\"TestMode: Error in starred card fetching logic:\", err);\n        setStarredCardIds([]);\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n\n    fetchStarredCards();\n    \n    // We'll set this in the fetchStarredCards function to ensure it happens\n    // after the cards are loaded\n    // if (location.state && (location.state as any).starredOnly) {\n    //   setTestMode('starred');\n    // }\n  }, [location.state]);\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        // Special case for testing all starred cards across all decks\n        if (deckId === 'all-decks' && testMode === 'starred') {\n          console.log(\"Testing all starred cards across all decks\");\n          \n          // Get all decks\n          const usersResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users`);\n          const demoUser = usersResponse.data.find((user: any) => user.email === 'demo@example.com');\n          \n          if (demoUser) {\n            const decksResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/decks/${demoUser.id}`);\n            const allDecks = decksResponse.data;\n            console.log(`Found ${allDecks.length} decks to search for starred cards`);\n            \n            // Collect cards from all decks\n            let allCards: Card[] = [];\n            for (const deck of allDecks) {\n              try {\n                const deckCardsResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deck.id}`);\n                allCards = [...allCards, ...deckCardsResponse.data];\n              } catch (deckErr) {\n                console.error(`Error fetching cards for deck ${deck.id}:`, deckErr);\n              }\n            }\n            \n            console.log(`Found total of ${allCards.length} cards across all decks`);\n            \n            // Filter to starred cards only\n            if (starredCardIds.length === 0) {\n              console.log(\"No starred cards found, showing empty set\");\n              allCards = [];\n            } else {\n              const filteredCards = allCards.filter(card => starredCardIds.includes(card.id));\n              console.log(`Filtered to ${filteredCards.length} starred cards across all decks`);\n              allCards = filteredCards;\n            }\n            \n            // Shuffle and set cards\n            const shuffledCards = allCards.sort(() => Math.random() - 0.5);\n            console.log(`Final count for testing: ${shuffledCards.length} cards`);\n            setCards(shuffledCards);\n          }\n          \n          setLoading(false);\n          return; // Exit early\n        }\n        \n        // Standard single deck test\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        let fetchedCards = [...response.data];\n        \n        console.log(\"Total cards in deck:\", fetchedCards.length);\n        console.log(\"Current test mode:\", testMode);\n        console.log(\"Starred card IDs:\", starredCardIds);\n        \n        // If we're in starred-only mode, filter the cards\n        if (testMode === 'starred') {\n          if (starredCardIds.length === 0) {\n            console.log(\"No starred cards found, showing empty set\");\n            fetchedCards = [];\n          } else {\n            const filteredCards = fetchedCards.filter(card => starredCardIds.includes(card.id));\n            console.log(\"Filtered to starred cards:\", filteredCards.length);\n            fetchedCards = filteredCards;\n          }\n        }\n        \n        // Shuffle the cards for the test\n        const shuffledCards = fetchedCards.sort(() => Math.random() - 0.5);\n        console.log(\"Final cards for testing:\", shuffledCards.length);\n        setCards(shuffledCards);\n        setLoading(false);\n      } catch (err) {\n        console.error('Failed to load cards:', err);\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    // Make sure to wait for starredCardIds to be loaded\n    if (!loadingStarred) {\n      fetchCards();\n    }\n  }, [deckId, testMode, starredCardIds, loadingStarred]);\n\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n\n  const transformGoogleDriveUrl = (url: string): string => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n      \n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      \n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    \n    return url;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n      const isCorrect = userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n      \n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n        \n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n            \n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n            \n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n            \n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, { \n              userId: demoUserId \n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      \n      setSubmitted(true);\n    }\n  };\n\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"test-container loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading test...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"test-container error\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (cards.length === 0) {\n    return (\n      <div className=\"test-container error\">\n        <h2>No Cards Available</h2>\n        {testMode === 'starred' ? (\n          <>\n            <p>You don't have any starred cards in this deck yet. Star some cards first or try the full test.</p>\n            {/* Debug information */}\n            <div style={{ \n              background: '#333', \n              padding: '10px', \n              borderRadius: '5px', \n              margin: '20px 0', \n              fontSize: '12px',\n              textAlign: 'left'\n            }}>\n              <p>Debug Info:</p>\n              <p>Starred Card IDs: {starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None'}</p>\n              <p>Deck ID: {deckId}</p>\n              <p>Test Mode: {testMode}</p>\n              <p>Loading Starred: {loadingStarred ? 'true' : 'false'}</p>\n              <button onClick={() => {\n                // Check localStorage\n                const local = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n                console.log('localStorage starred cards:', local);\n                alert('localStorage starred cards: ' + (local || 'none'));\n              }}>Check Local Storage</button>\n            </div>\n          </>\n        ) : (\n          <p>This deck doesn't have any cards to test with.</p>\n        )}\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (testComplete) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round((results.correct.length / totalCards) * 100);\n    \n    return (\n      <div className=\"test-container results\">\n        <h2>Test Complete!</h2>\n        <div className=\"test-summary\">\n          <div className=\"score\">Score: {score}%</div>\n          <div className=\"stats\">\n            <div className=\"correct-count\">{results.correct.length} correct</div>\n            <div className=\"incorrect-count\">{results.incorrect.length} incorrect</div>\n          </div>\n        </div>\n        \n        {results.incorrect.length > 0 && (\n          <div className=\"incorrect-cards\">\n            <h3>Incorrect Answers (Automatically Starred)</h3>\n            <ul className=\"results-list\">\n              {results.incorrect.map((card, index) => (\n                <li key={card.id} className=\"result-item\">\n                  <div className=\"result-answer\">\n                    <strong>Correct answer:</strong> {card.answer}\n                  </div>\n                  <div className=\"result-user-answer\">\n                    <strong>Your answer:</strong> {results.userAnswers[results.correct.length + index]}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        <div className=\"test-actions\">\n          <button onClick={handleStartOver} className=\"start-over-btn\">\n            Start Over\n          </button>\n          <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n            Back to Deck\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  \n  return (\n    <div className=\"test-container\">\n      <div className=\"test-header\">\n        <button onClick={handleBackToDeck} className=\"back-btn\">\n          &larr; Back to Deck\n        </button>\n        <h1>ASL Test</h1>\n        <div className=\"progress\">\n          {currentCardIndex + 1} of {cards.length}\n          {testMode === 'starred' && ' (Starred Cards Only)'}\n        </div>\n      </div>\n\n      <div className=\"test-content\">\n        <div className=\"video-container\">\n          {videoSource && (\n            videoSource.includes('/preview') ? (\n              <iframe \n                src={videoSource}\n                width=\"100%\" \n                height=\"100%\" \n                allow=\"autoplay\" \n                allowFullScreen\n                style={{ border: 'none' }}\n              ></iframe>\n            ) : (\n              <ReactPlayer\n                url={videoSource}\n                width=\"100%\"\n                height=\"100%\"\n                controls\n                playing={!submitted}\n                config={{\n                  file: {\n                    attributes: {\n                      controlsList: 'nodownload',\n                      disablePictureInPicture: true\n                    },\n                    forceVideo: true\n                  }\n                }}\n              />\n            )\n          )}\n        </div>\n\n        {!submitted ? (\n          <form onSubmit={handleSubmit} className=\"answer-form\">\n            <div className=\"input-group\">\n              <label htmlFor=\"answer\">What is the sign?</label>\n              <input\n                id=\"answer\"\n                type=\"text\"\n                value={userAnswer}\n                onChange={(e) => setUserAnswer(e.target.value)}\n                placeholder=\"Type your answer here\"\n                autoComplete=\"off\"\n                autoFocus\n                required\n              />\n            </div>\n            <button type=\"submit\" className=\"submit-btn\">\n              Submit\n            </button>\n          </form>\n        ) : (\n          <div className={`feedback ${isCorrect ? 'correct' : 'incorrect'}`}>\n            <h2>\n              {isCorrect ? 'Correct!' : 'Incorrect'}\n            </h2>\n            <p>\n              The correct answer is: <strong>{currentCard.answer}</strong>\n              {!isCorrect && <span className=\"auto-starred\"> (Auto-starred for review)</span>}\n            </p>\n            <button onClick={handleNextCard} className=\"next-btn\">\n              {currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TestMode; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}