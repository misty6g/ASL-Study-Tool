{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TestMode = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState('');\n  const [starredCardIds, setStarredCardIds] = useState([]);\n  const [testMode, setTestMode] = useState('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Fetch starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n          console.log(\"Loaded starred cards from server:\", response.data.cardIds.length);\n          setStarredCardIds(response.data.cardIds || []);\n        } else {\n          // If server has no data, use localStorage as fallback\n          const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n          if (localStarred) {\n            try {\n              const parsedStarred = JSON.parse(localStarred);\n              console.log('Using starred cards from localStorage:', parsedStarred);\n              setStarredCardIds(parsedStarred);\n            } catch (parseErr) {\n              console.error('Error parsing starred cards from localStorage:', parseErr);\n              setStarredCardIds([]);\n            }\n          } else {\n            setStarredCardIds([]);\n          }\n        }\n        setLoadingStarred(false);\n      } catch (err) {\n        console.error(\"Error fetching starred cards from server:\", err);\n\n        // Use localStorage as fallback\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('Using starred cards from localStorage:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n          } catch (parseErr) {\n            console.error('Error parsing starred cards from localStorage:', parseErr);\n            setStarredCardIds([]);\n          }\n        } else {\n          setStarredCardIds([]);\n        }\n        setLoadingStarred(false);\n      }\n    };\n    fetchStarredCards();\n\n    // Check if we should only test starred cards\n    if (location.state && location.state.starredOnly) {\n      setTestMode('starred');\n    }\n  }, [location.state]);\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        // Special case for testing all starred cards across all decks\n        if (deckId === 'all-decks' && testMode === 'starred') {\n          console.log(\"Testing all starred cards across all decks\");\n\n          // Get all decks\n          const usersResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users`);\n          const demoUser = usersResponse.data.find(user => user.email === 'demo@example.com');\n          if (demoUser) {\n            const decksResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/decks/${demoUser.id}`);\n            const allDecks = decksResponse.data;\n            console.log(`Found ${allDecks.length} decks to search for starred cards`);\n\n            // Collect cards from all decks\n            let allCards = [];\n            for (const deck of allDecks) {\n              try {\n                const deckCardsResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deck.id}`);\n                allCards = [...allCards, ...deckCardsResponse.data];\n              } catch (deckErr) {\n                console.error(`Error fetching cards for deck ${deck.id}:`, deckErr);\n              }\n            }\n            console.log(`Found total of ${allCards.length} cards across all decks`);\n\n            // Filter to starred cards only\n            if (starredCardIds.length === 0) {\n              console.log(\"No starred cards found, showing empty set\");\n              allCards = [];\n            } else {\n              const filteredCards = allCards.filter(card => starredCardIds.includes(card.id));\n              console.log(`Filtered to ${filteredCards.length} starred cards across all decks`);\n              allCards = filteredCards;\n            }\n\n            // Shuffle and set cards\n            const shuffledCards = allCards.sort(() => Math.random() - 0.5);\n            console.log(`Final count for testing: ${shuffledCards.length} cards`);\n            setCards(shuffledCards);\n          }\n          setLoading(false);\n          return; // Exit early\n        }\n\n        // Standard single deck test\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        let fetchedCards = [...response.data];\n        console.log(\"Total cards in deck:\", fetchedCards.length);\n        console.log(\"Current test mode:\", testMode);\n        console.log(\"Starred card IDs:\", starredCardIds);\n\n        // If we're in starred-only mode, filter the cards\n        if (testMode === 'starred') {\n          if (starredCardIds.length === 0) {\n            console.log(\"No starred cards found, showing empty set\");\n            fetchedCards = [];\n          } else {\n            const filteredCards = fetchedCards.filter(card => starredCardIds.includes(card.id));\n            console.log(\"Filtered to starred cards:\", filteredCards.length);\n            fetchedCards = filteredCards;\n          }\n        }\n\n        // Shuffle the cards for the test\n        const shuffledCards = fetchedCards.sort(() => Math.random() - 0.5);\n        console.log(\"Final cards for testing:\", shuffledCards.length);\n        setCards(shuffledCards);\n        setLoading(false);\n      } catch (err) {\n        console.error('Failed to load cards:', err);\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    // Make sure to wait for starredCardIds to be loaded\n    if (!loadingStarred) {\n      fetchCards();\n    }\n  }, [deckId, testMode, starredCardIds, loadingStarred]);\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n  const transformGoogleDriveUrl = url => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n\n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    return url;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n      const isCorrect = userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n\n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n\n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n\n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n\n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, {\n              userId: demoUserId\n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      setSubmitted(true);\n    }\n  };\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading test...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this);\n  }\n  if (cards.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No Cards Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), testMode === 'starred' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You don't have any starred cards in this deck yet. Star some cards first or try the full test.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This deck doesn't have any cards to test with.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this);\n  }\n  if (testComplete) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round(results.correct.length / totalCards * 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [\"Score: \", score, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"correct-count\",\n            children: [results.correct.length, \" correct\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"incorrect-count\",\n            children: [results.incorrect.length, \" incorrect\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), results.incorrect.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"incorrect-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Incorrect Answers (Automatically Starred)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"results-list\",\n          children: results.incorrect.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"result-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Correct answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 386,\n                columnNumber: 21\n              }, this), \" \", card.answer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 385,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-user-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Your answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 21\n              }, this), \" \", results.userAnswers[results.correct.length + index]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 19\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartOver,\n          className: \"start-over-btn\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToDeck,\n          className: \"back-to-deck-btn\",\n          children: \"Back to Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this);\n  }\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-btn\",\n        children: \"\\u2190 Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ASL Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: [currentCardIndex + 1, \" of \", cards.length, testMode === 'starred' && ' (Starred Cards Only)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: videoSource && (videoSource.includes('/preview') ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          allow: \"autoplay\",\n          allowFullScreen: true,\n          style: {\n            border: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          url: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          controls: true,\n          playing: !submitted,\n          config: {\n            file: {\n              attributes: {\n                controlsList: 'nodownload',\n                disablePictureInPicture: true\n              },\n              forceVideo: true\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), !submitted ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"answer-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"answer\",\n            children: \"What is the sign?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"answer\",\n            type: \"text\",\n            value: userAnswer,\n            onChange: e => setUserAnswer(e.target.value),\n            placeholder: \"Type your answer here\",\n            autoComplete: \"off\",\n            autoFocus: true,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `feedback ${isCorrect ? 'correct' : 'incorrect'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isCorrect ? 'Correct!' : 'Incorrect'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The correct answer is: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 38\n          }, this), !isCorrect && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"auto-starred\",\n            children: \" (Auto-starred for review)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextCard,\n          className: \"next-btn\",\n          children: currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 5\n  }, this);\n};\n_s(TestMode, \"djjkJGMFxtav8X2ekIPnAY62yjc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = TestMode;\nexport default TestMode;\nvar _c;\n$RefreshReg$(_c, \"TestMode\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","axios","ReactPlayer","LOCAL_STORAGE_STARRED_KEY","jsxDEV","_jsxDEV","TestMode","deckId","_s","cards","setCards","loading","setLoading","error","setError","currentCardIndex","setCurrentCardIndex","userAnswer","setUserAnswer","submitted","setSubmitted","testComplete","setTestComplete","results","setResults","correct","incorrect","userAnswers","videoSource","setVideoSource","starredCardIds","setStarredCardIds","testMode","setTestMode","loadingStarred","setLoadingStarred","navigate","location","fetchStarredCards","demoUserId","response","get","process","env","REACT_APP_API_URL","data","cardIds","length","console","log","localStarred","localStorage","getItem","parsedStarred","JSON","parse","parseErr","err","state","starredOnly","fetchCards","usersResponse","demoUser","find","user","email","decksResponse","id","allDecks","allCards","deck","deckCardsResponse","deckErr","filteredCards","filter","card","includes","shuffledCards","sort","Math","random","fetchedCards","currentCard","video_url","transformedUrl","transformGoogleDriveUrl","handleKeyPress","e","key","handleNextCard","window","addEventListener","removeEventListener","url","fileId","match","handleSubmit","preventDefault","isCorrect","trim","toLowerCase","answer","prevResults","newStarredIds","setItem","stringify","post","userId","handleBackToDeck","handleStartOver","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","totalCards","score","round","map","index","src","width","height","allow","allowFullScreen","style","border","controls","playing","config","file","attributes","controlsList","disablePictureInPicture","forceVideo","onSubmit","htmlFor","type","value","onChange","target","placeholder","autoComplete","autoFocus","required","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\n\ninterface Card {\n  id: string;\n  video_url: string;\n  answer: string;\n  deck_id: string;\n}\n\ninterface TestModeProps {\n  deckId: string;\n}\n\nconst TestMode: React.FC<TestModeProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState<{ correct: Card[], incorrect: Card[], userAnswers: string[] }>({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState<string>('');\n  const [starredCardIds, setStarredCardIds] = useState<string[]>([]);\n  const [testMode, setTestMode] = useState<'all' | 'starred'>('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  \n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Fetch starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        \n        if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n          console.log(\"Loaded starred cards from server:\", response.data.cardIds.length);\n          setStarredCardIds(response.data.cardIds || []);\n        } else {\n          // If server has no data, use localStorage as fallback\n          const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n          if (localStarred) {\n            try {\n              const parsedStarred = JSON.parse(localStarred);\n              console.log('Using starred cards from localStorage:', parsedStarred);\n              setStarredCardIds(parsedStarred);\n            } catch (parseErr) {\n              console.error('Error parsing starred cards from localStorage:', parseErr);\n              setStarredCardIds([]);\n            }\n          } else {\n            setStarredCardIds([]);\n          }\n        }\n        setLoadingStarred(false);\n      } catch (err) {\n        console.error(\"Error fetching starred cards from server:\", err);\n        \n        // Use localStorage as fallback\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('Using starred cards from localStorage:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n          } catch (parseErr) {\n            console.error('Error parsing starred cards from localStorage:', parseErr);\n            setStarredCardIds([]);\n          }\n        } else {\n          setStarredCardIds([]);\n        }\n        setLoadingStarred(false);\n      }\n    };\n\n    fetchStarredCards();\n    \n    // Check if we should only test starred cards\n    if (location.state && (location.state as any).starredOnly) {\n      setTestMode('starred');\n    }\n  }, [location.state]);\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        // Special case for testing all starred cards across all decks\n        if (deckId === 'all-decks' && testMode === 'starred') {\n          console.log(\"Testing all starred cards across all decks\");\n          \n          // Get all decks\n          const usersResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users`);\n          const demoUser = usersResponse.data.find((user: any) => user.email === 'demo@example.com');\n          \n          if (demoUser) {\n            const decksResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/decks/${demoUser.id}`);\n            const allDecks = decksResponse.data;\n            console.log(`Found ${allDecks.length} decks to search for starred cards`);\n            \n            // Collect cards from all decks\n            let allCards: Card[] = [];\n            for (const deck of allDecks) {\n              try {\n                const deckCardsResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deck.id}`);\n                allCards = [...allCards, ...deckCardsResponse.data];\n              } catch (deckErr) {\n                console.error(`Error fetching cards for deck ${deck.id}:`, deckErr);\n              }\n            }\n            \n            console.log(`Found total of ${allCards.length} cards across all decks`);\n            \n            // Filter to starred cards only\n            if (starredCardIds.length === 0) {\n              console.log(\"No starred cards found, showing empty set\");\n              allCards = [];\n            } else {\n              const filteredCards = allCards.filter(card => starredCardIds.includes(card.id));\n              console.log(`Filtered to ${filteredCards.length} starred cards across all decks`);\n              allCards = filteredCards;\n            }\n            \n            // Shuffle and set cards\n            const shuffledCards = allCards.sort(() => Math.random() - 0.5);\n            console.log(`Final count for testing: ${shuffledCards.length} cards`);\n            setCards(shuffledCards);\n          }\n          \n          setLoading(false);\n          return; // Exit early\n        }\n        \n        // Standard single deck test\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        let fetchedCards = [...response.data];\n        \n        console.log(\"Total cards in deck:\", fetchedCards.length);\n        console.log(\"Current test mode:\", testMode);\n        console.log(\"Starred card IDs:\", starredCardIds);\n        \n        // If we're in starred-only mode, filter the cards\n        if (testMode === 'starred') {\n          if (starredCardIds.length === 0) {\n            console.log(\"No starred cards found, showing empty set\");\n            fetchedCards = [];\n          } else {\n            const filteredCards = fetchedCards.filter(card => starredCardIds.includes(card.id));\n            console.log(\"Filtered to starred cards:\", filteredCards.length);\n            fetchedCards = filteredCards;\n          }\n        }\n        \n        // Shuffle the cards for the test\n        const shuffledCards = fetchedCards.sort(() => Math.random() - 0.5);\n        console.log(\"Final cards for testing:\", shuffledCards.length);\n        setCards(shuffledCards);\n        setLoading(false);\n      } catch (err) {\n        console.error('Failed to load cards:', err);\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    // Make sure to wait for starredCardIds to be loaded\n    if (!loadingStarred) {\n      fetchCards();\n    }\n  }, [deckId, testMode, starredCardIds, loadingStarred]);\n\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n\n  const transformGoogleDriveUrl = (url: string): string => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n      \n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      \n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    \n    return url;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n      const isCorrect = userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n      \n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n        \n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n            \n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n            \n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n            \n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, { \n              userId: demoUserId \n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      \n      setSubmitted(true);\n    }\n  };\n\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"test-container loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading test...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"test-container error\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (cards.length === 0) {\n    return (\n      <div className=\"test-container error\">\n        <h2>No Cards Available</h2>\n        {testMode === 'starred' ? (\n          <p>You don't have any starred cards in this deck yet. Star some cards first or try the full test.</p>\n        ) : (\n          <p>This deck doesn't have any cards to test with.</p>\n        )}\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (testComplete) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round((results.correct.length / totalCards) * 100);\n    \n    return (\n      <div className=\"test-container results\">\n        <h2>Test Complete!</h2>\n        <div className=\"test-summary\">\n          <div className=\"score\">Score: {score}%</div>\n          <div className=\"stats\">\n            <div className=\"correct-count\">{results.correct.length} correct</div>\n            <div className=\"incorrect-count\">{results.incorrect.length} incorrect</div>\n          </div>\n        </div>\n        \n        {results.incorrect.length > 0 && (\n          <div className=\"incorrect-cards\">\n            <h3>Incorrect Answers (Automatically Starred)</h3>\n            <ul className=\"results-list\">\n              {results.incorrect.map((card, index) => (\n                <li key={card.id} className=\"result-item\">\n                  <div className=\"result-answer\">\n                    <strong>Correct answer:</strong> {card.answer}\n                  </div>\n                  <div className=\"result-user-answer\">\n                    <strong>Your answer:</strong> {results.userAnswers[results.correct.length + index]}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        <div className=\"test-actions\">\n          <button onClick={handleStartOver} className=\"start-over-btn\">\n            Start Over\n          </button>\n          <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n            Back to Deck\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  \n  return (\n    <div className=\"test-container\">\n      <div className=\"test-header\">\n        <button onClick={handleBackToDeck} className=\"back-btn\">\n          &larr; Back to Deck\n        </button>\n        <h1>ASL Test</h1>\n        <div className=\"progress\">\n          {currentCardIndex + 1} of {cards.length}\n          {testMode === 'starred' && ' (Starred Cards Only)'}\n        </div>\n      </div>\n\n      <div className=\"test-content\">\n        <div className=\"video-container\">\n          {videoSource && (\n            videoSource.includes('/preview') ? (\n              <iframe \n                src={videoSource}\n                width=\"100%\" \n                height=\"100%\" \n                allow=\"autoplay\" \n                allowFullScreen\n                style={{ border: 'none' }}\n              ></iframe>\n            ) : (\n              <ReactPlayer\n                url={videoSource}\n                width=\"100%\"\n                height=\"100%\"\n                controls\n                playing={!submitted}\n                config={{\n                  file: {\n                    attributes: {\n                      controlsList: 'nodownload',\n                      disablePictureInPicture: true\n                    },\n                    forceVideo: true\n                  }\n                }}\n              />\n            )\n          )}\n        </div>\n\n        {!submitted ? (\n          <form onSubmit={handleSubmit} className=\"answer-form\">\n            <div className=\"input-group\">\n              <label htmlFor=\"answer\">What is the sign?</label>\n              <input\n                id=\"answer\"\n                type=\"text\"\n                value={userAnswer}\n                onChange={(e) => setUserAnswer(e.target.value)}\n                placeholder=\"Type your answer here\"\n                autoComplete=\"off\"\n                autoFocus\n                required\n              />\n            </div>\n            <button type=\"submit\" className=\"submit-btn\">\n              Submit\n            </button>\n          </form>\n        ) : (\n          <div className={`feedback ${isCorrect ? 'correct' : 'incorrect'}`}>\n            <h2>\n              {isCorrect ? 'Correct!' : 'Incorrect'}\n            </h2>\n            <p>\n              The correct answer is: <strong>{currentCard.answer}</strong>\n              {!isCorrect && <span className=\"auto-starred\"> (Auto-starred for review)</span>}\n            </p>\n            <button onClick={handleNextCard} className=\"next-btn\">\n              {currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TestMode; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}