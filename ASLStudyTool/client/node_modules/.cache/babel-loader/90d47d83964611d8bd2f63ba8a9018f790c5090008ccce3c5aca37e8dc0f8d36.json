{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Deck.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, createRef, useCallback } from 'react';\nimport Flashcard from './Flashcard';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './Deck.css'; // We'll create this for the back button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARDS_PER_PAGE = 20; // Number of cards to display at once\n\n// Add local storage for starred cards\nconst LOCAL_STORAGE_STARRED_KEY = 'asl_study_tool_starred_cards';\nconst Deck = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [visibleCards, setVisibleCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showInstructions, setShowInstructions] = useState(() => {\n    // Check localStorage for saved preference\n    const savedPreference = localStorage.getItem('showFlipInstructions');\n    return savedPreference === null ? true : savedPreference === 'true';\n  });\n  const [areAllFlipped, setAreAllFlipped] = useState(false);\n  const [highlightedCardId, setHighlightedCardId] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMoreCards, setHasMoreCards] = useState(true);\n  const [starredCardIds, setStarredCardIds] = useState([]);\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const cardRefs = useRef([]);\n  const cardContainerRefs = useRef([]);\n  const observerRef = useRef(null);\n  const loadMoreTriggerRef = useRef(null);\n  let isStarToggleInProgress = false;\n\n  // Load starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n          // Server has data, use it\n          setStarredCardIds(response.data.cardIds || []);\n        } else {\n          // If server fails, use localStorage as fallback\n          const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n          if (localStarred) {\n            try {\n              const parsedStarred = JSON.parse(localStarred);\n              console.log('Using starred cards from localStorage:', parsedStarred);\n              setStarredCardIds(parsedStarred);\n            } catch (parseErr) {\n              console.error('Error parsing starred cards from localStorage:', parseErr);\n              setStarredCardIds([]);\n            }\n          } else {\n            setStarredCardIds([]);\n          }\n        }\n      } catch (err) {\n        console.error(\"Error fetching starred cards from server:\", err);\n\n        // Use localStorage as fallback\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('Using starred cards from localStorage:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n          } catch (parseErr) {\n            console.error('Error parsing starred cards from localStorage:', parseErr);\n            setStarredCardIds([]);\n          }\n        } else {\n          setStarredCardIds([]);\n        }\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n    fetchStarredCards();\n  }, []);\n\n  // Function to refresh the starred cards\n  const refreshStarredCards = async () => {\n    try {\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n      console.log('Refreshing starred cards list');\n\n      // Try server first\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        console.log('Refreshed starred cards from server:', response.data.cardIds);\n        setStarredCardIds(response.data.cardIds || []);\n        return;\n      } catch (serverErr) {\n        console.error(\"Error refreshing starred cards from server:\", serverErr);\n        // Fall back to localStorage if server fails\n      }\n\n      // Use localStorage as fallback\n      const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n      if (localStarred) {\n        try {\n          const parsedStarred = JSON.parse(localStarred);\n          console.log('Using starred cards from localStorage:', parsedStarred);\n          setStarredCardIds(parsedStarred);\n        } catch (parseErr) {\n          console.error('Error parsing starred cards from localStorage:', parseErr);\n        }\n      }\n    } catch (err) {\n      console.error(\"Error refreshing starred cards:\", err);\n    }\n  };\n\n  // Handle starring/unstarring cards\n  const handleStarToggle = async (cardId, isStarred) => {\n    console.log(`Toggling star for card ${cardId} to ${isStarred ? 'starred' : 'unstarred'}`);\n\n    // Update UI state immediately for responsiveness\n    let newStarredIds;\n    if (isStarred) {\n      newStarredIds = [...starredCardIds, cardId];\n      setStarredCardIds(newStarredIds);\n    } else {\n      newStarredIds = starredCardIds.filter(id => id !== cardId);\n      setStarredCardIds(newStarredIds);\n    }\n\n    // Save to localStorage immediately\n    localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n\n    // Try to update the server as well (knowing it might fail)\n    try {\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n      if (isStarred) {\n        // Star the card\n        console.log(`Sending API request to star card ${cardId}`);\n        await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, {\n          userId: demoUserId\n        });\n        console.log('Star API request sent');\n      } else {\n        // Unstar the card\n        console.log(`Sending API request to unstar card ${cardId}`);\n        await axios.delete(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, {\n          data: {\n            userId: demoUserId\n          }\n        });\n        console.log('Unstar API request sent');\n      }\n    } catch (err) {\n      console.error(`Error ${isStarred ? 'starring' : 'unstarring'} card on server:`, err);\n      console.log('Using localStorage for persistence instead');\n      // No need to revert UI state since we've already updated localStorage\n    }\n  };\n\n  // Load more cards when user scrolls near the bottom\n  const loadMoreCards = useCallback(() => {\n    if (!loading && hasMoreCards) {\n      const nextPage = currentPage + 1;\n      const startIndex = (nextPage - 1) * CARDS_PER_PAGE;\n      const endIndex = startIndex + CARDS_PER_PAGE;\n\n      // Check if we have more cards to load\n      if (startIndex < cards.length) {\n        const nextBatch = cards.slice(startIndex, endIndex);\n        setVisibleCards(prevCards => [...prevCards, ...nextBatch]);\n        setCurrentPage(nextPage);\n        setHasMoreCards(endIndex < cards.length);\n      } else {\n        setHasMoreCards(false);\n      }\n    }\n  }, [loading, hasMoreCards, currentPage, cards]);\n\n  // Set up intersection observer for infinite scrolling\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '100px',\n      threshold: 0.1\n    };\n    observerRef.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        loadMoreCards();\n      }\n    }, options);\n    if (loadMoreTriggerRef.current) {\n      observerRef.current.observe(loadMoreTriggerRef.current);\n    }\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [loadMoreCards]);\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        const fetchedCards = response.data;\n        setCards(fetchedCards);\n\n        // Initialize with first page of cards\n        const initialCards = fetchedCards.slice(0, CARDS_PER_PAGE);\n        setVisibleCards(initialCards);\n        setHasMoreCards(fetchedCards.length > CARDS_PER_PAGE);\n\n        // Create refs for visible cards\n        cardRefs.current = Array(fetchedCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n        cardContainerRefs.current = Array(fetchedCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n        setLoading(false);\n\n        // Check if coming from search with a highlight card ID\n        if (location.state) {\n          const {\n            highlightCardId\n          } = location.state;\n          if (highlightCardId) {\n            setHighlightedCardId(highlightCardId);\n\n            // Find the card index\n            const cardIndex = fetchedCards.findIndex(card => card.id === highlightCardId);\n\n            // Calculate what page the card is on\n            if (cardIndex !== -1) {\n              const cardPage = Math.floor(cardIndex / CARDS_PER_PAGE) + 1;\n\n              // Load all pages up to the card's page\n              if (cardPage > 1) {\n                const cardsToShow = fetchedCards.slice(0, cardPage * CARDS_PER_PAGE);\n                setVisibleCards(cardsToShow);\n                setCurrentPage(cardPage);\n                setHasMoreCards(cardPage * CARDS_PER_PAGE < fetchedCards.length);\n              }\n\n              // Wait for rendering then scroll to the highlighted card\n              setTimeout(() => {\n                var _cardContainerRefs$cu;\n                if ((_cardContainerRefs$cu = cardContainerRefs.current[cardIndex]) !== null && _cardContainerRefs$cu !== void 0 && _cardContainerRefs$cu.current) {\n                  var _cardContainerRefs$cu2;\n                  (_cardContainerRefs$cu2 = cardContainerRefs.current[cardIndex].current) === null || _cardContainerRefs$cu2 === void 0 ? void 0 : _cardContainerRefs$cu2.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                  });\n                }\n              }, 300);\n            }\n          }\n        }\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n    fetchCards();\n  }, [deckId, location.state]);\n  const handleBackClick = () => {\n    navigate('/');\n  };\n  const handleTestClick = () => {\n    navigate(`/test/${deckId}`);\n  };\n  const handleStarredTestClick = () => {\n    navigate(`/test/${deckId}`, {\n      state: {\n        starredOnly: true\n      }\n    });\n  };\n  const handleFirstFlip = () => {\n    // When any card is flipped for the first time, hide instructions on all cards\n    setShowInstructions(false);\n    // Save preference to localStorage\n    localStorage.setItem('showFlipInstructions', 'false');\n  };\n  const handleFlipAll = () => {\n    const newFlipState = !areAllFlipped;\n    cardRefs.current.forEach(ref => {\n      if (ref.current) {\n        ref.current.flip(newFlipState);\n      }\n    });\n    setAreAllFlipped(newFlipState);\n  };\n  const handleCardInteraction = cardId => {\n    // Remove the highlighting when card is interacted with\n    setHighlightedCardId(null);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n\n  // Check if any cards are starred - add more debugging\n  const hasStarredCards = cards.some(card => starredCardIds.includes(card.id));\n  console.log(`Starred card IDs: ${starredCardIds.length > 0 ? starredCardIds.join(', ') : 'none'}`);\n  console.log(`Has starred cards: ${hasStarredCards}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deck-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        title: \"Back to Home\",\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deck-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button\",\n          onClick: handleFlipAll,\n          title: areAllFlipped ? \"Show Videos\" : \"Show Answers\",\n          children: areAllFlipped ? \"Show Videos\" : \"Show Answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button\",\n          onClick: handleTestClick,\n          title: \"Start Test\",\n          children: \"Test All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this), starredCardIds.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button starred-test-button\",\n          onClick: handleStarredTestClick,\n          title: \"Test Starred Cards Only\",\n          children: \"Test Starred\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button debug-button\",\n          onClick: refreshStarredCards,\n          title: \"Debug: Refresh Starred Cards\",\n          children: \"Refresh Stars\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      style: {\n        padding: \"10px\",\n        background: \"#333\",\n        margin: \"10px\",\n        borderRadius: \"5px\",\n        fontSize: \"12px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Starred IDs: \", starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Loading Starred: \", loadingStarred ? 'Yes' : 'No']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Deck Cards: \", cards.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-grid\",\n      children: [visibleCards.map((card, index) => {\n        const cardIndex = cards.findIndex(c => c.id === card.id);\n        const isCardStarred = starredCardIds.includes(card.id);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: cardContainerRefs.current[cardIndex],\n          children: /*#__PURE__*/_jsxDEV(Flashcard, {\n            ref: cardRefs.current[cardIndex],\n            videoUrl: card.video_url,\n            answer: card.answer,\n            showInstructions: showInstructions,\n            onFirstFlip: handleFirstFlip,\n            isHighlighted: card.id === highlightedCardId,\n            onCardInteraction: handleCardInteraction,\n            cardId: card.id,\n            isStarred: isCardStarred,\n            onStarToggle: handleStarToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 15\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }, this);\n      }), hasMoreCards && /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreTriggerRef,\n        className: \"load-more-trigger\",\n        style: {\n          width: '100%',\n          height: '20px',\n          margin: '20px 0'\n        },\n        children: loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"Loading more cards...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n};\n_s(Deck, \"1cDCEKde95X9YweFNgko6eo2kpg=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useEffect","useState","useRef","createRef","useCallback","Flashcard","axios","useNavigate","useLocation","jsxDEV","_jsxDEV","CARDS_PER_PAGE","LOCAL_STORAGE_STARRED_KEY","Deck","deckId","_s","cards","setCards","visibleCards","setVisibleCards","loading","setLoading","error","setError","showInstructions","setShowInstructions","savedPreference","localStorage","getItem","areAllFlipped","setAreAllFlipped","highlightedCardId","setHighlightedCardId","currentPage","setCurrentPage","hasMoreCards","setHasMoreCards","starredCardIds","setStarredCardIds","loadingStarred","setLoadingStarred","navigate","location","cardRefs","cardContainerRefs","observerRef","loadMoreTriggerRef","isStarToggleInProgress","fetchStarredCards","demoUserId","response","get","process","env","REACT_APP_API_URL","data","cardIds","length","localStarred","parsedStarred","JSON","parse","console","log","parseErr","err","refreshStarredCards","serverErr","handleStarToggle","cardId","isStarred","newStarredIds","filter","id","setItem","stringify","post","userId","delete","loadMoreCards","nextPage","startIndex","endIndex","nextBatch","slice","prevCards","options","root","rootMargin","threshold","current","IntersectionObserver","entries","isIntersecting","observe","disconnect","fetchCards","fetchedCards","initialCards","Array","fill","map","state","highlightCardId","cardIndex","findIndex","card","cardPage","Math","floor","cardsToShow","setTimeout","_cardContainerRefs$cu","_cardContainerRefs$cu2","scrollIntoView","behavior","block","handleBackClick","handleTestClick","handleStarredTestClick","starredOnly","handleFirstFlip","handleFlipAll","newFlipState","forEach","ref","flip","handleCardInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","hasStarredCards","some","includes","join","onClick","title","style","padding","background","margin","borderRadius","fontSize","index","c","isCardStarred","videoUrl","video_url","answer","onFirstFlip","isHighlighted","onCardInteraction","onStarToggle","width","height","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Deck.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, createRef, useCallback } from 'react';\nimport Flashcard, { FlashcardHandle } from './Flashcard';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './Deck.css'; // We'll create this for the back button\n\ninterface Card {\n  id: string;\n  video_url: string;\n  answer: string;\n  deck_id: string;\n}\n\ninterface DeckProps {\n  deckId: string;\n}\n\nconst CARDS_PER_PAGE = 20; // Number of cards to display at once\n\n// Add local storage for starred cards\nconst LOCAL_STORAGE_STARRED_KEY = 'asl_study_tool_starred_cards';\n\nconst Deck: React.FC<DeckProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [visibleCards, setVisibleCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showInstructions, setShowInstructions] = useState(() => {\n    // Check localStorage for saved preference\n    const savedPreference = localStorage.getItem('showFlipInstructions');\n    return savedPreference === null ? true : savedPreference === 'true';\n  });\n  const [areAllFlipped, setAreAllFlipped] = useState(false);\n  const [highlightedCardId, setHighlightedCardId] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMoreCards, setHasMoreCards] = useState(true);\n  const [starredCardIds, setStarredCardIds] = useState<string[]>([]);\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const cardRefs = useRef<(React.RefObject<FlashcardHandle>)[]>([]);\n  const cardContainerRefs = useRef<(React.RefObject<HTMLDivElement>)[]>([]);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const loadMoreTriggerRef = useRef<HTMLDivElement>(null);\n  let isStarToggleInProgress = false;\n\n  // Load starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        \n        if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n          // Server has data, use it\n          setStarredCardIds(response.data.cardIds || []);\n        } else {\n          // If server fails, use localStorage as fallback\n          const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n          if (localStarred) {\n            try {\n              const parsedStarred = JSON.parse(localStarred);\n              console.log('Using starred cards from localStorage:', parsedStarred);\n              setStarredCardIds(parsedStarred);\n            } catch (parseErr) {\n              console.error('Error parsing starred cards from localStorage:', parseErr);\n              setStarredCardIds([]);\n            }\n          } else {\n            setStarredCardIds([]);\n          }\n        }\n      } catch (err) {\n        console.error(\"Error fetching starred cards from server:\", err);\n        \n        // Use localStorage as fallback\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('Using starred cards from localStorage:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n          } catch (parseErr) {\n            console.error('Error parsing starred cards from localStorage:', parseErr);\n            setStarredCardIds([]);\n          }\n        } else {\n          setStarredCardIds([]);\n        }\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n\n    fetchStarredCards();\n  }, []);\n\n  // Function to refresh the starred cards\n  const refreshStarredCards = async () => {\n    try {\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n      console.log('Refreshing starred cards list');\n      \n      // Try server first\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        console.log('Refreshed starred cards from server:', response.data.cardIds);\n        setStarredCardIds(response.data.cardIds || []);\n        return;\n      } catch (serverErr) {\n        console.error(\"Error refreshing starred cards from server:\", serverErr);\n        // Fall back to localStorage if server fails\n      }\n      \n      // Use localStorage as fallback\n      const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n      if (localStarred) {\n        try {\n          const parsedStarred = JSON.parse(localStarred);\n          console.log('Using starred cards from localStorage:', parsedStarred);\n          setStarredCardIds(parsedStarred);\n        } catch (parseErr) {\n          console.error('Error parsing starred cards from localStorage:', parseErr);\n        }\n      }\n    } catch (err) {\n      console.error(\"Error refreshing starred cards:\", err);\n    }\n  };\n\n  // Handle starring/unstarring cards\n  const handleStarToggle = async (cardId: string, isStarred: boolean) => {\n    console.log(`Toggling star for card ${cardId} to ${isStarred ? 'starred' : 'unstarred'}`);\n    \n    // Update UI state immediately for responsiveness\n    let newStarredIds;\n    if (isStarred) {\n      newStarredIds = [...starredCardIds, cardId];\n      setStarredCardIds(newStarredIds);\n    } else {\n      newStarredIds = starredCardIds.filter(id => id !== cardId);\n      setStarredCardIds(newStarredIds);\n    }\n    \n    // Save to localStorage immediately\n    localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n    \n    // Try to update the server as well (knowing it might fail)\n    try {\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n      \n      if (isStarred) {\n        // Star the card\n        console.log(`Sending API request to star card ${cardId}`);\n        await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, { userId: demoUserId });\n        console.log('Star API request sent');\n      } else {\n        // Unstar the card\n        console.log(`Sending API request to unstar card ${cardId}`);\n        await axios.delete(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, { \n          data: { userId: demoUserId } \n        });\n        console.log('Unstar API request sent');\n      }\n    } catch (err) {\n      console.error(`Error ${isStarred ? 'starring' : 'unstarring'} card on server:`, err);\n      console.log('Using localStorage for persistence instead');\n      // No need to revert UI state since we've already updated localStorage\n    }\n  };\n\n  // Load more cards when user scrolls near the bottom\n  const loadMoreCards = useCallback(() => {\n    if (!loading && hasMoreCards) {\n      const nextPage = currentPage + 1;\n      const startIndex = (nextPage - 1) * CARDS_PER_PAGE;\n      const endIndex = startIndex + CARDS_PER_PAGE;\n      \n      // Check if we have more cards to load\n      if (startIndex < cards.length) {\n        const nextBatch = cards.slice(startIndex, endIndex);\n        setVisibleCards(prevCards => [...prevCards, ...nextBatch]);\n        setCurrentPage(nextPage);\n        setHasMoreCards(endIndex < cards.length);\n      } else {\n        setHasMoreCards(false);\n      }\n    }\n  }, [loading, hasMoreCards, currentPage, cards]);\n\n  // Set up intersection observer for infinite scrolling\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '100px',\n      threshold: 0.1\n    };\n    \n    observerRef.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        loadMoreCards();\n      }\n    }, options);\n    \n    if (loadMoreTriggerRef.current) {\n      observerRef.current.observe(loadMoreTriggerRef.current);\n    }\n    \n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [loadMoreCards]);\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        const fetchedCards = response.data;\n        setCards(fetchedCards);\n        \n        // Initialize with first page of cards\n        const initialCards = fetchedCards.slice(0, CARDS_PER_PAGE);\n        setVisibleCards(initialCards);\n        setHasMoreCards(fetchedCards.length > CARDS_PER_PAGE);\n        \n        // Create refs for visible cards\n        cardRefs.current = Array(fetchedCards.length)\n          .fill(null)\n          .map(() => createRef<FlashcardHandle>() as React.RefObject<FlashcardHandle>);\n\n        cardContainerRefs.current = Array(fetchedCards.length)\n          .fill(null)\n          .map(() => createRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>);\n        \n        setLoading(false);\n        \n        // Check if coming from search with a highlight card ID\n        if (location.state) {\n          const { highlightCardId } = location.state as { fromSearch?: boolean, highlightCardId?: string };\n          \n          if (highlightCardId) {\n            setHighlightedCardId(highlightCardId);\n            \n            // Find the card index\n            const cardIndex = fetchedCards.findIndex((card: Card) => card.id === highlightCardId);\n            \n            // Calculate what page the card is on\n            if (cardIndex !== -1) {\n              const cardPage = Math.floor(cardIndex / CARDS_PER_PAGE) + 1;\n              \n              // Load all pages up to the card's page\n              if (cardPage > 1) {\n                const cardsToShow = fetchedCards.slice(0, cardPage * CARDS_PER_PAGE);\n                setVisibleCards(cardsToShow);\n                setCurrentPage(cardPage);\n                setHasMoreCards(cardPage * CARDS_PER_PAGE < fetchedCards.length);\n              }\n              \n              // Wait for rendering then scroll to the highlighted card\n              setTimeout(() => {\n                if (cardContainerRefs.current[cardIndex]?.current) {\n                  cardContainerRefs.current[cardIndex].current?.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                  });\n                }\n              }, 300);\n            }\n          }\n        }\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    fetchCards();\n  }, [deckId, location.state]);\n\n  const handleBackClick = () => {\n    navigate('/');\n  };\n\n  const handleTestClick = () => {\n    navigate(`/test/${deckId}`);\n  };\n\n  const handleStarredTestClick = () => {\n    navigate(`/test/${deckId}`, { state: { starredOnly: true } });\n  };\n\n  const handleFirstFlip = () => {\n    // When any card is flipped for the first time, hide instructions on all cards\n    setShowInstructions(false);\n    // Save preference to localStorage\n    localStorage.setItem('showFlipInstructions', 'false');\n  };\n\n  const handleFlipAll = () => {\n    const newFlipState = !areAllFlipped;\n    cardRefs.current.forEach(ref => {\n      if (ref.current) {\n        ref.current.flip(newFlipState);\n      }\n    });\n    setAreAllFlipped(newFlipState);\n  };\n\n  const handleCardInteraction = (cardId: string) => {\n    // Remove the highlighting when card is interacted with\n    setHighlightedCardId(null);\n  };\n\n  if (loading) return (\n    <div className=\"loading-container\">\n      <div>Loading...</div>\n    </div>\n  );\n  \n  if (error) return (\n    <div className=\"error-container\">\n      <div>Error: {error}</div>\n    </div>\n  );\n\n  // Check if any cards are starred - add more debugging\n  const hasStarredCards = cards.some(card => starredCardIds.includes(card.id));\n  console.log(`Starred card IDs: ${starredCardIds.length > 0 ? starredCardIds.join(', ') : 'none'}`);\n  console.log(`Has starred cards: ${hasStarredCards}`);\n\n  return (\n    <div className=\"deck-container\">\n      <div className=\"back-button-container\">\n        <button className=\"back-button\" onClick={handleBackClick} title=\"Back to Home\">\n          &#8592;\n        </button>\n      </div>\n      <div className=\"deck-actions\">\n        <div className=\"action-buttons\">\n          <button className=\"deck-button\" onClick={handleFlipAll} title={areAllFlipped ? \"Show Videos\" : \"Show Answers\"}>\n            {areAllFlipped ? \"Show Videos\" : \"Show Answers\"}\n          </button>\n          <button className=\"deck-button\" onClick={handleTestClick} title=\"Start Test\">\n            Test All\n          </button>\n          {starredCardIds.length > 0 && (\n            <button \n              className=\"deck-button starred-test-button\" \n              onClick={handleStarredTestClick} \n              title=\"Test Starred Cards Only\"\n            >\n              Test Starred\n            </button>\n          )}\n          <button \n            className=\"deck-button debug-button\" \n            onClick={refreshStarredCards}\n            title=\"Debug: Refresh Starred Cards\" \n          >\n            Refresh Stars\n          </button>\n        </div>\n      </div>\n      \n      {/* Debug info */}\n      <div className=\"debug-info\" style={{ padding: \"10px\", background: \"#333\", margin: \"10px\", borderRadius: \"5px\", fontSize: \"12px\" }}>\n        <p>Starred IDs: {starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None'}</p>\n        <p>Loading Starred: {loadingStarred ? 'Yes' : 'No'}</p>\n        <p>Deck Cards: {cards.length}</p>\n      </div>\n      \n      <div className=\"cards-grid\">\n        {visibleCards.map((card, index) => {\n          const cardIndex = cards.findIndex(c => c.id === card.id);\n          const isCardStarred = starredCardIds.includes(card.id);\n          \n          return (\n            <div key={card.id} ref={cardContainerRefs.current[cardIndex]}>\n              <Flashcard\n                ref={cardRefs.current[cardIndex]}\n                videoUrl={card.video_url}\n                answer={card.answer}\n                showInstructions={showInstructions}\n                onFirstFlip={handleFirstFlip}\n                isHighlighted={card.id === highlightedCardId}\n                onCardInteraction={handleCardInteraction}\n                cardId={card.id}\n                isStarred={isCardStarred}\n                onStarToggle={handleStarToggle}\n              />\n            </div>\n          );\n        })}\n        \n        {/* Loading trigger element */}\n        {hasMoreCards && (\n          <div \n            ref={loadMoreTriggerRef} \n            className=\"load-more-trigger\"\n            style={{ width: '100%', height: '20px', margin: '20px 0' }}\n          >\n            {loading && <div className=\"loading-indicator\">Loading more cards...</div>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Deck; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}