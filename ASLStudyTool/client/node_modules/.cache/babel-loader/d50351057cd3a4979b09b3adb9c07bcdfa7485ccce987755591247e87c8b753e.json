{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Deck.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, createRef, useCallback } from 'react';\nimport Flashcard from './Flashcard';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './Deck.css'; // We'll create this for the back button\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARDS_PER_PAGE = 20; // Number of cards to display at once\n\nconst Deck = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [visibleCards, setVisibleCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showInstructions, setShowInstructions] = useState(() => {\n    // Check localStorage for saved preference\n    const savedPreference = localStorage.getItem('showFlipInstructions');\n    return savedPreference === null ? true : savedPreference === 'true';\n  });\n  const [areAllFlipped, setAreAllFlipped] = useState(false);\n  const [highlightedCardId, setHighlightedCardId] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMoreCards, setHasMoreCards] = useState(true);\n  const [starredCardIds, setStarredCardIds] = useState([]);\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const cardRefs = useRef([]);\n  const cardContainerRefs = useRef([]);\n  const observerRef = useRef(null);\n  const loadMoreTriggerRef = useRef(null);\n  let isStarToggleInProgress = false;\n\n  // Load starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n          // Server has data, use it\n          setStarredCardIds(response.data.cardIds || []);\n        } else {\n          // If server fails, use localStorage as fallback\n          const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n          if (localStarred) {\n            try {\n              const parsedStarred = JSON.parse(localStarred);\n              console.log('Using starred cards from localStorage:', parsedStarred);\n              setStarredCardIds(parsedStarred);\n            } catch (parseErr) {\n              console.error('Error parsing starred cards from localStorage:', parseErr);\n              setStarredCardIds([]);\n            }\n          } else {\n            setStarredCardIds([]);\n          }\n        }\n      } catch (err) {\n        console.error(\"Error fetching starred cards from server:\", err);\n\n        // Use localStorage as fallback\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('Using starred cards from localStorage:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n          } catch (parseErr) {\n            console.error('Error parsing starred cards from localStorage:', parseErr);\n            setStarredCardIds([]);\n          }\n        } else {\n          setStarredCardIds([]);\n        }\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n    fetchStarredCards();\n  }, []);\n\n  // Function to refresh the starred cards\n  const refreshStarredCards = async () => {\n    try {\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n      console.log('Refreshing starred cards list');\n\n      // Try server first\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        console.log('Refreshed starred cards from server:', response.data.cardIds);\n        setStarredCardIds(response.data.cardIds || []);\n        return;\n      } catch (serverErr) {\n        console.error(\"Error refreshing starred cards from server:\", serverErr);\n        // Fall back to localStorage if server fails\n      }\n\n      // Use localStorage as fallback\n      const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n      if (localStarred) {\n        try {\n          const parsedStarred = JSON.parse(localStarred);\n          console.log('Using starred cards from localStorage:', parsedStarred);\n          setStarredCardIds(parsedStarred);\n        } catch (parseErr) {\n          console.error('Error parsing starred cards from localStorage:', parseErr);\n        }\n      }\n    } catch (err) {\n      console.error(\"Error refreshing starred cards:\", err);\n    }\n  };\n\n  // Handle starring/unstarring cards\n  const handleStarToggle = async (cardId, isStarred) => {\n    console.log(`Toggling star for card ${cardId} to ${isStarred ? 'starred' : 'unstarred'}`);\n\n    // Update UI state immediately for responsiveness\n    let newStarredIds;\n    if (isStarred) {\n      newStarredIds = [...starredCardIds, cardId];\n      setStarredCardIds(newStarredIds);\n    } else {\n      newStarredIds = starredCardIds.filter(id => id !== cardId);\n      setStarredCardIds(newStarredIds);\n    }\n\n    // Save to localStorage immediately\n    localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n\n    // Try to update the server as well (knowing it might fail)\n    try {\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n      if (isStarred) {\n        // Star the card\n        console.log(`Sending API request to star card ${cardId}`);\n        await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, {\n          userId: demoUserId\n        });\n        console.log('Star API request sent');\n      } else {\n        // Unstar the card\n        console.log(`Sending API request to unstar card ${cardId}`);\n        await axios.delete(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, {\n          data: {\n            userId: demoUserId\n          }\n        });\n        console.log('Unstar API request sent');\n      }\n    } catch (err) {\n      console.error(`Error ${isStarred ? 'starring' : 'unstarring'} card on server:`, err);\n      console.log('Using localStorage for persistence instead');\n      // No need to revert UI state since we've already updated localStorage\n    }\n  };\n\n  // Load more cards when user scrolls near the bottom\n  const loadMoreCards = useCallback(() => {\n    if (!loading && hasMoreCards) {\n      const nextPage = currentPage + 1;\n      const startIndex = (nextPage - 1) * CARDS_PER_PAGE;\n      const endIndex = startIndex + CARDS_PER_PAGE;\n\n      // Check if we have more cards to load\n      if (startIndex < cards.length) {\n        const nextBatch = cards.slice(startIndex, endIndex);\n        setVisibleCards(prevCards => [...prevCards, ...nextBatch]);\n        setCurrentPage(nextPage);\n        setHasMoreCards(endIndex < cards.length);\n      } else {\n        setHasMoreCards(false);\n      }\n    }\n  }, [loading, hasMoreCards, currentPage, cards]);\n\n  // Set up intersection observer for infinite scrolling\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '100px',\n      threshold: 0.1\n    };\n    observerRef.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        loadMoreCards();\n      }\n    }, options);\n    if (loadMoreTriggerRef.current) {\n      observerRef.current.observe(loadMoreTriggerRef.current);\n    }\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [loadMoreCards]);\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        // Special handling for \"all-starred\" deck ID\n        if (deckId === 'all-starred') {\n          console.log(\"Handling all-starred deck view\");\n\n          // Set a special title\n          document.title = \"All Starred Cards\";\n\n          // Check if we were passed starred card IDs in the location state\n          let starredIds = [];\n          if (location.state && location.state.starredCardIds) {\n            try {\n              const stateStarredIds = location.state.starredCardIds;\n              starredIds = typeof stateStarredIds === 'string' ? JSON.parse(stateStarredIds) : stateStarredIds;\n              console.log(\"Using starred IDs from location state:\", starredIds);\n            } catch (e) {\n              console.error(\"Error parsing starred IDs from location state:\", e);\n            }\n          }\n\n          // If no starred IDs in state, use our loaded starredCardIds\n          if (starredIds.length === 0) {\n            starredIds = starredCardIds;\n            console.log(\"Using loaded starred card IDs:\", starredIds);\n          }\n\n          // Get all decks\n          const usersResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users`);\n          const demoUser = usersResponse.data.find(user => user.email === 'demo@example.com');\n          if (demoUser) {\n            const decksResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/decks/${demoUser.id}`);\n            const allDecks = decksResponse.data;\n            console.log(`Found ${allDecks.length} decks to search for starred cards`);\n\n            // Collect cards from all decks\n            let allCards = [];\n            for (const deck of allDecks) {\n              try {\n                const deckCardsResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deck.id}`);\n                allCards = [...allCards, ...deckCardsResponse.data];\n              } catch (deckErr) {\n                console.error(`Error fetching cards for deck ${deck.id}:`, deckErr);\n              }\n            }\n            console.log(`Found total of ${allCards.length} cards across all decks`);\n\n            // Filter to starred cards only\n            const filteredCards = allCards.filter(card => starredIds.includes(card.id));\n            console.log(`Filtered to ${filteredCards.length} starred cards across all decks`);\n            setCards(filteredCards);\n\n            // Initialize with first page of cards\n            const initialCards = filteredCards.slice(0, CARDS_PER_PAGE);\n            setVisibleCards(initialCards);\n            setHasMoreCards(filteredCards.length > CARDS_PER_PAGE);\n\n            // Create refs for visible cards\n            cardRefs.current = Array(filteredCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n            cardContainerRefs.current = Array(filteredCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n          }\n          setLoading(false);\n          return; // Exit early\n        }\n\n        // Regular deck handling\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        const fetchedCards = response.data;\n        setCards(fetchedCards);\n\n        // Initialize with first page of cards\n        const initialCards = fetchedCards.slice(0, CARDS_PER_PAGE);\n        setVisibleCards(initialCards);\n        setHasMoreCards(fetchedCards.length > CARDS_PER_PAGE);\n\n        // Create refs for visible cards\n        cardRefs.current = Array(fetchedCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n        cardContainerRefs.current = Array(fetchedCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n        setLoading(false);\n\n        // Check if coming from search with a highlight card ID\n        if (location.state) {\n          const {\n            highlightCardId\n          } = location.state;\n          if (highlightCardId) {\n            setHighlightedCardId(highlightCardId);\n\n            // Find the card index\n            const cardIndex = fetchedCards.findIndex(card => card.id === highlightCardId);\n\n            // Calculate what page the card is on\n            if (cardIndex !== -1) {\n              const cardPage = Math.floor(cardIndex / CARDS_PER_PAGE) + 1;\n\n              // Load all pages up to the card's page\n              if (cardPage > 1) {\n                const cardsToShow = fetchedCards.slice(0, cardPage * CARDS_PER_PAGE);\n                setVisibleCards(cardsToShow);\n                setCurrentPage(cardPage);\n                setHasMoreCards(cardPage * CARDS_PER_PAGE < fetchedCards.length);\n              }\n\n              // Wait for rendering then scroll to the highlighted card\n              setTimeout(() => {\n                var _cardContainerRefs$cu;\n                if ((_cardContainerRefs$cu = cardContainerRefs.current[cardIndex]) !== null && _cardContainerRefs$cu !== void 0 && _cardContainerRefs$cu.current) {\n                  var _cardContainerRefs$cu2;\n                  (_cardContainerRefs$cu2 = cardContainerRefs.current[cardIndex].current) === null || _cardContainerRefs$cu2 === void 0 ? void 0 : _cardContainerRefs$cu2.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                  });\n                }\n              }, 300);\n            }\n          }\n        }\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n    fetchCards();\n  }, [deckId, location.state]);\n  const handleBackClick = () => {\n    navigate('/');\n  };\n  const handleTestClick = () => {\n    console.log(\"Navigating to test all mode\");\n\n    // Store current deck state in session storage for reliability\n    try {\n      sessionStorage.setItem('current_deck_cards', JSON.stringify(cards));\n      console.log(`Saved ${cards.length} cards to session storage for test mode`);\n    } catch (err) {\n      console.error(\"Failed to save cards to session storage:\", err);\n    }\n    navigate(`/test/${deckId}`, {\n      state: {\n        testMode: 'all',\n        cardCount: cards.length\n      }\n    });\n  };\n  const handleStarredTestClick = () => {\n    // Save starred card IDs to localStorage before navigating to ensure they're available\n    localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(starredCardIds));\n    console.log(\"Navigating to test starred mode with IDs:\", starredCardIds);\n\n    // Also save to session storage for immediate access\n    try {\n      sessionStorage.setItem('starred_card_ids', JSON.stringify(starredCardIds));\n      console.log(`Saved ${starredCardIds.length} starred IDs to session storage`);\n\n      // Also save current deck cards\n      sessionStorage.setItem('current_deck_cards', JSON.stringify(cards));\n      console.log(`Saved ${cards.length} deck cards to session storage for test mode`);\n    } catch (err) {\n      console.error(\"Failed to save to session storage:\", err);\n    }\n\n    // Pass starred IDs directly in state to avoid relying on localStorage or server fetch\n    navigate(`/test/${deckId}`, {\n      state: {\n        starredOnly: true,\n        starredCardIds: starredCardIds,\n        cardCount: cards.length\n      }\n    });\n  };\n  const handleFirstFlip = () => {\n    // When any card is flipped for the first time, hide instructions on all cards\n    setShowInstructions(false);\n    // Save preference to localStorage\n    localStorage.setItem('showFlipInstructions', 'false');\n  };\n  const handleFlipAll = () => {\n    const newFlipState = !areAllFlipped;\n    cardRefs.current.forEach(ref => {\n      if (ref.current) {\n        ref.current.flip(newFlipState);\n      }\n    });\n    setAreAllFlipped(newFlipState);\n  };\n  const handleCardInteraction = cardId => {\n    // Remove the highlighting when card is interacted with\n    setHighlightedCardId(null);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 434,\n    columnNumber: 5\n  }, this);\n\n  // Check if any cards are starred - add more debugging\n  const hasStarredCards = cards.some(card => starredCardIds.includes(card.id));\n  console.log(`Starred card IDs: ${starredCardIds.length > 0 ? starredCardIds.join(', ') : 'none'}`);\n  console.log(`Has starred cards: ${hasStarredCards}`);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deck-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        title: \"Back to Home\",\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), deckId === 'all-starred' && /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"deck-title\",\n      children: \"All Starred Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deck-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button\",\n          onClick: handleFlipAll,\n          title: areAllFlipped ? \"Show Videos\" : \"Show Answers\",\n          children: areAllFlipped ? \"Show Videos\" : \"Show Answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button\",\n          onClick: handleTestClick,\n          title: \"Start Test\",\n          children: \"Test All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 11\n        }, this), starredCardIds.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button starred-test-button\",\n          onClick: handleStarredTestClick,\n          title: \"Test Starred Cards Only\",\n          children: \"Test Starred\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button debug-button\",\n          onClick: refreshStarredCards,\n          title: \"Debug: Refresh Starred Cards\",\n          children: \"Refresh Stars\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"debug-info\",\n      style: {\n        padding: \"10px\",\n        background: \"#333\",\n        margin: \"10px\",\n        borderRadius: \"5px\",\n        fontSize: \"12px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Starred IDs: \", starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Loading Starred: \", loadingStarred ? 'Yes' : 'No']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Deck Cards: \", cards.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-grid\",\n      children: [visibleCards.map((card, index) => {\n        const cardIndex = cards.findIndex(c => c.id === card.id);\n        const isCardStarred = starredCardIds.includes(card.id);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: cardContainerRefs.current[cardIndex],\n          children: /*#__PURE__*/_jsxDEV(Flashcard, {\n            ref: cardRefs.current[cardIndex],\n            videoUrl: card.video_url,\n            answer: card.answer,\n            showInstructions: showInstructions,\n            onFirstFlip: handleFirstFlip,\n            isHighlighted: card.id === highlightedCardId,\n            onCardInteraction: handleCardInteraction,\n            cardId: card.id,\n            isStarred: isCardStarred,\n            onStarToggle: handleStarToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 15\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this);\n      }), hasMoreCards && /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreTriggerRef,\n        className: \"load-more-trigger\",\n        style: {\n          width: '100%',\n          height: '20px',\n          margin: '20px 0'\n        },\n        children: loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"Loading more cards...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 445,\n    columnNumber: 5\n  }, this);\n};\n_s(Deck, \"1cDCEKde95X9YweFNgko6eo2kpg=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useEffect","useState","useRef","createRef","useCallback","Flashcard","axios","useNavigate","useLocation","LOCAL_STORAGE_STARRED_KEY","jsxDEV","_jsxDEV","CARDS_PER_PAGE","Deck","deckId","_s","cards","setCards","visibleCards","setVisibleCards","loading","setLoading","error","setError","showInstructions","setShowInstructions","savedPreference","localStorage","getItem","areAllFlipped","setAreAllFlipped","highlightedCardId","setHighlightedCardId","currentPage","setCurrentPage","hasMoreCards","setHasMoreCards","starredCardIds","setStarredCardIds","loadingStarred","setLoadingStarred","navigate","location","cardRefs","cardContainerRefs","observerRef","loadMoreTriggerRef","isStarToggleInProgress","fetchStarredCards","demoUserId","response","get","process","env","REACT_APP_API_URL","data","cardIds","length","localStarred","parsedStarred","JSON","parse","console","log","parseErr","err","refreshStarredCards","serverErr","handleStarToggle","cardId","isStarred","newStarredIds","filter","id","setItem","stringify","post","userId","delete","loadMoreCards","nextPage","startIndex","endIndex","nextBatch","slice","prevCards","options","root","rootMargin","threshold","current","IntersectionObserver","entries","isIntersecting","observe","disconnect","fetchCards","document","title","starredIds","state","stateStarredIds","e","usersResponse","demoUser","find","user","email","decksResponse","allDecks","allCards","deck","deckCardsResponse","deckErr","filteredCards","card","includes","initialCards","Array","fill","map","fetchedCards","highlightCardId","cardIndex","findIndex","cardPage","Math","floor","cardsToShow","setTimeout","_cardContainerRefs$cu","_cardContainerRefs$cu2","scrollIntoView","behavior","block","handleBackClick","handleTestClick","sessionStorage","testMode","cardCount","handleStarredTestClick","starredOnly","handleFirstFlip","handleFlipAll","newFlipState","forEach","ref","flip","handleCardInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","hasStarredCards","some","join","onClick","style","padding","background","margin","borderRadius","fontSize","index","c","isCardStarred","videoUrl","video_url","answer","onFirstFlip","isHighlighted","onCardInteraction","onStarToggle","width","height","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Deck.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, createRef, useCallback } from 'react';\nimport Flashcard, { FlashcardHandle } from './Flashcard';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './Deck.css'; // We'll create this for the back button\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\n\ninterface Card {\n  id: string;\n  video_url: string;\n  answer: string;\n  deck_id: string;\n}\n\ninterface DeckProps {\n  deckId: string;\n}\n\nconst CARDS_PER_PAGE = 20; // Number of cards to display at once\n\nconst Deck: React.FC<DeckProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [visibleCards, setVisibleCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showInstructions, setShowInstructions] = useState(() => {\n    // Check localStorage for saved preference\n    const savedPreference = localStorage.getItem('showFlipInstructions');\n    return savedPreference === null ? true : savedPreference === 'true';\n  });\n  const [areAllFlipped, setAreAllFlipped] = useState(false);\n  const [highlightedCardId, setHighlightedCardId] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMoreCards, setHasMoreCards] = useState(true);\n  const [starredCardIds, setStarredCardIds] = useState<string[]>([]);\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const cardRefs = useRef<(React.RefObject<FlashcardHandle>)[]>([]);\n  const cardContainerRefs = useRef<(React.RefObject<HTMLDivElement>)[]>([]);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const loadMoreTriggerRef = useRef<HTMLDivElement>(null);\n  let isStarToggleInProgress = false;\n\n  // Load starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        \n        if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n          // Server has data, use it\n          setStarredCardIds(response.data.cardIds || []);\n        } else {\n          // If server fails, use localStorage as fallback\n          const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n          if (localStarred) {\n            try {\n              const parsedStarred = JSON.parse(localStarred);\n              console.log('Using starred cards from localStorage:', parsedStarred);\n              setStarredCardIds(parsedStarred);\n            } catch (parseErr) {\n              console.error('Error parsing starred cards from localStorage:', parseErr);\n              setStarredCardIds([]);\n            }\n          } else {\n            setStarredCardIds([]);\n          }\n        }\n      } catch (err) {\n        console.error(\"Error fetching starred cards from server:\", err);\n        \n        // Use localStorage as fallback\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('Using starred cards from localStorage:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n          } catch (parseErr) {\n            console.error('Error parsing starred cards from localStorage:', parseErr);\n            setStarredCardIds([]);\n          }\n        } else {\n          setStarredCardIds([]);\n        }\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n\n    fetchStarredCards();\n  }, []);\n\n  // Function to refresh the starred cards\n  const refreshStarredCards = async () => {\n    try {\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n      console.log('Refreshing starred cards list');\n      \n      // Try server first\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        console.log('Refreshed starred cards from server:', response.data.cardIds);\n        setStarredCardIds(response.data.cardIds || []);\n        return;\n      } catch (serverErr) {\n        console.error(\"Error refreshing starred cards from server:\", serverErr);\n        // Fall back to localStorage if server fails\n      }\n      \n      // Use localStorage as fallback\n      const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n      if (localStarred) {\n        try {\n          const parsedStarred = JSON.parse(localStarred);\n          console.log('Using starred cards from localStorage:', parsedStarred);\n          setStarredCardIds(parsedStarred);\n        } catch (parseErr) {\n          console.error('Error parsing starred cards from localStorage:', parseErr);\n        }\n      }\n    } catch (err) {\n      console.error(\"Error refreshing starred cards:\", err);\n    }\n  };\n\n  // Handle starring/unstarring cards\n  const handleStarToggle = async (cardId: string, isStarred: boolean) => {\n    console.log(`Toggling star for card ${cardId} to ${isStarred ? 'starred' : 'unstarred'}`);\n    \n    // Update UI state immediately for responsiveness\n    let newStarredIds;\n    if (isStarred) {\n      newStarredIds = [...starredCardIds, cardId];\n      setStarredCardIds(newStarredIds);\n    } else {\n      newStarredIds = starredCardIds.filter(id => id !== cardId);\n      setStarredCardIds(newStarredIds);\n    }\n    \n    // Save to localStorage immediately\n    localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n    \n    // Try to update the server as well (knowing it might fail)\n    try {\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n      \n      if (isStarred) {\n        // Star the card\n        console.log(`Sending API request to star card ${cardId}`);\n        await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, { userId: demoUserId });\n        console.log('Star API request sent');\n      } else {\n        // Unstar the card\n        console.log(`Sending API request to unstar card ${cardId}`);\n        await axios.delete(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, { \n          data: { userId: demoUserId } \n        });\n        console.log('Unstar API request sent');\n      }\n    } catch (err) {\n      console.error(`Error ${isStarred ? 'starring' : 'unstarring'} card on server:`, err);\n      console.log('Using localStorage for persistence instead');\n      // No need to revert UI state since we've already updated localStorage\n    }\n  };\n\n  // Load more cards when user scrolls near the bottom\n  const loadMoreCards = useCallback(() => {\n    if (!loading && hasMoreCards) {\n      const nextPage = currentPage + 1;\n      const startIndex = (nextPage - 1) * CARDS_PER_PAGE;\n      const endIndex = startIndex + CARDS_PER_PAGE;\n      \n      // Check if we have more cards to load\n      if (startIndex < cards.length) {\n        const nextBatch = cards.slice(startIndex, endIndex);\n        setVisibleCards(prevCards => [...prevCards, ...nextBatch]);\n        setCurrentPage(nextPage);\n        setHasMoreCards(endIndex < cards.length);\n      } else {\n        setHasMoreCards(false);\n      }\n    }\n  }, [loading, hasMoreCards, currentPage, cards]);\n\n  // Set up intersection observer for infinite scrolling\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '100px',\n      threshold: 0.1\n    };\n    \n    observerRef.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        loadMoreCards();\n      }\n    }, options);\n    \n    if (loadMoreTriggerRef.current) {\n      observerRef.current.observe(loadMoreTriggerRef.current);\n    }\n    \n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [loadMoreCards]);\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        // Special handling for \"all-starred\" deck ID\n        if (deckId === 'all-starred') {\n          console.log(\"Handling all-starred deck view\");\n          \n          // Set a special title\n          document.title = \"All Starred Cards\";\n          \n          // Check if we were passed starred card IDs in the location state\n          let starredIds: string[] = [];\n          if (location.state && (location.state as any).starredCardIds) {\n            try {\n              const stateStarredIds = (location.state as any).starredCardIds;\n              starredIds = typeof stateStarredIds === 'string' ? \n                JSON.parse(stateStarredIds) : stateStarredIds;\n              console.log(\"Using starred IDs from location state:\", starredIds);\n            } catch (e) {\n              console.error(\"Error parsing starred IDs from location state:\", e);\n            }\n          }\n          \n          // If no starred IDs in state, use our loaded starredCardIds\n          if (starredIds.length === 0) {\n            starredIds = starredCardIds;\n            console.log(\"Using loaded starred card IDs:\", starredIds);\n          }\n          \n          // Get all decks\n          const usersResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/users`);\n          const demoUser = usersResponse.data.find((user: any) => user.email === 'demo@example.com');\n          \n          if (demoUser) {\n            const decksResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/decks/${demoUser.id}`);\n            const allDecks = decksResponse.data;\n            console.log(`Found ${allDecks.length} decks to search for starred cards`);\n            \n            // Collect cards from all decks\n            let allCards: Card[] = [];\n            for (const deck of allDecks) {\n              try {\n                const deckCardsResponse = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deck.id}`);\n                allCards = [...allCards, ...deckCardsResponse.data];\n              } catch (deckErr) {\n                console.error(`Error fetching cards for deck ${deck.id}:`, deckErr);\n              }\n            }\n            \n            console.log(`Found total of ${allCards.length} cards across all decks`);\n            \n            // Filter to starred cards only\n            const filteredCards = allCards.filter(card => starredIds.includes(card.id));\n            console.log(`Filtered to ${filteredCards.length} starred cards across all decks`);\n            \n            setCards(filteredCards);\n            \n            // Initialize with first page of cards\n            const initialCards = filteredCards.slice(0, CARDS_PER_PAGE);\n            setVisibleCards(initialCards);\n            setHasMoreCards(filteredCards.length > CARDS_PER_PAGE);\n            \n            // Create refs for visible cards\n            cardRefs.current = Array(filteredCards.length)\n              .fill(null)\n              .map(() => createRef<FlashcardHandle>() as React.RefObject<FlashcardHandle>);\n\n            cardContainerRefs.current = Array(filteredCards.length)\n              .fill(null)\n              .map(() => createRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>);\n          }\n          \n          setLoading(false);\n          return; // Exit early\n        }\n        \n        // Regular deck handling\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        const fetchedCards = response.data;\n        setCards(fetchedCards);\n        \n        // Initialize with first page of cards\n        const initialCards = fetchedCards.slice(0, CARDS_PER_PAGE);\n        setVisibleCards(initialCards);\n        setHasMoreCards(fetchedCards.length > CARDS_PER_PAGE);\n        \n        // Create refs for visible cards\n        cardRefs.current = Array(fetchedCards.length)\n          .fill(null)\n          .map(() => createRef<FlashcardHandle>() as React.RefObject<FlashcardHandle>);\n\n        cardContainerRefs.current = Array(fetchedCards.length)\n          .fill(null)\n          .map(() => createRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>);\n        \n        setLoading(false);\n        \n        // Check if coming from search with a highlight card ID\n        if (location.state) {\n          const { highlightCardId } = location.state as { fromSearch?: boolean, highlightCardId?: string };\n          \n          if (highlightCardId) {\n            setHighlightedCardId(highlightCardId);\n            \n            // Find the card index\n            const cardIndex = fetchedCards.findIndex((card: Card) => card.id === highlightCardId);\n            \n            // Calculate what page the card is on\n            if (cardIndex !== -1) {\n              const cardPage = Math.floor(cardIndex / CARDS_PER_PAGE) + 1;\n              \n              // Load all pages up to the card's page\n              if (cardPage > 1) {\n                const cardsToShow = fetchedCards.slice(0, cardPage * CARDS_PER_PAGE);\n                setVisibleCards(cardsToShow);\n                setCurrentPage(cardPage);\n                setHasMoreCards(cardPage * CARDS_PER_PAGE < fetchedCards.length);\n              }\n              \n              // Wait for rendering then scroll to the highlighted card\n              setTimeout(() => {\n                if (cardContainerRefs.current[cardIndex]?.current) {\n                  cardContainerRefs.current[cardIndex].current?.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                  });\n                }\n              }, 300);\n            }\n          }\n        }\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    fetchCards();\n  }, [deckId, location.state]);\n\n  const handleBackClick = () => {\n    navigate('/');\n  };\n\n  const handleTestClick = () => {\n    console.log(\"Navigating to test all mode\");\n    \n    // Store current deck state in session storage for reliability\n    try {\n      sessionStorage.setItem('current_deck_cards', JSON.stringify(cards));\n      console.log(`Saved ${cards.length} cards to session storage for test mode`);\n    } catch (err) {\n      console.error(\"Failed to save cards to session storage:\", err);\n    }\n    \n    navigate(`/test/${deckId}`, {\n      state: { \n        testMode: 'all',\n        cardCount: cards.length\n      }\n    });\n  };\n\n  const handleStarredTestClick = () => {\n    // Save starred card IDs to localStorage before navigating to ensure they're available\n    localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(starredCardIds));\n    console.log(\"Navigating to test starred mode with IDs:\", starredCardIds);\n    \n    // Also save to session storage for immediate access\n    try {\n      sessionStorage.setItem('starred_card_ids', JSON.stringify(starredCardIds));\n      console.log(`Saved ${starredCardIds.length} starred IDs to session storage`);\n      \n      // Also save current deck cards\n      sessionStorage.setItem('current_deck_cards', JSON.stringify(cards));\n      console.log(`Saved ${cards.length} deck cards to session storage for test mode`);\n    } catch (err) {\n      console.error(\"Failed to save to session storage:\", err);\n    }\n    \n    // Pass starred IDs directly in state to avoid relying on localStorage or server fetch\n    navigate(`/test/${deckId}`, { \n      state: { \n        starredOnly: true, \n        starredCardIds: starredCardIds,\n        cardCount: cards.length\n      } \n    });\n  };\n\n  const handleFirstFlip = () => {\n    // When any card is flipped for the first time, hide instructions on all cards\n    setShowInstructions(false);\n    // Save preference to localStorage\n    localStorage.setItem('showFlipInstructions', 'false');\n  };\n\n  const handleFlipAll = () => {\n    const newFlipState = !areAllFlipped;\n    cardRefs.current.forEach(ref => {\n      if (ref.current) {\n        ref.current.flip(newFlipState);\n      }\n    });\n    setAreAllFlipped(newFlipState);\n  };\n\n  const handleCardInteraction = (cardId: string) => {\n    // Remove the highlighting when card is interacted with\n    setHighlightedCardId(null);\n  };\n\n  if (loading) return (\n    <div className=\"loading-container\">\n      <div>Loading...</div>\n    </div>\n  );\n  \n  if (error) return (\n    <div className=\"error-container\">\n      <div>Error: {error}</div>\n    </div>\n  );\n\n  // Check if any cards are starred - add more debugging\n  const hasStarredCards = cards.some(card => starredCardIds.includes(card.id));\n  console.log(`Starred card IDs: ${starredCardIds.length > 0 ? starredCardIds.join(', ') : 'none'}`);\n  console.log(`Has starred cards: ${hasStarredCards}`);\n\n  return (\n    <div className=\"deck-container\">\n      <div className=\"back-button-container\">\n        <button className=\"back-button\" onClick={handleBackClick} title=\"Back to Home\">\n          &#8592;\n        </button>\n      </div>\n      \n      {/* Deck title */}\n      {deckId === 'all-starred' && (\n        <h1 className=\"deck-title\">All Starred Cards</h1>\n      )}\n      \n      <div className=\"deck-actions\">\n        <div className=\"action-buttons\">\n          <button className=\"deck-button\" onClick={handleFlipAll} title={areAllFlipped ? \"Show Videos\" : \"Show Answers\"}>\n            {areAllFlipped ? \"Show Videos\" : \"Show Answers\"}\n          </button>\n          <button className=\"deck-button\" onClick={handleTestClick} title=\"Start Test\">\n            Test All\n          </button>\n          {starredCardIds.length > 0 && (\n            <button \n              className=\"deck-button starred-test-button\" \n              onClick={handleStarredTestClick} \n              title=\"Test Starred Cards Only\"\n            >\n              Test Starred\n            </button>\n          )}\n          <button \n            className=\"deck-button debug-button\" \n            onClick={refreshStarredCards}\n            title=\"Debug: Refresh Starred Cards\" \n          >\n            Refresh Stars\n          </button>\n        </div>\n      </div>\n      \n      {/* Debug info */}\n      <div className=\"debug-info\" style={{ padding: \"10px\", background: \"#333\", margin: \"10px\", borderRadius: \"5px\", fontSize: \"12px\" }}>\n        <p>Starred IDs: {starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None'}</p>\n        <p>Loading Starred: {loadingStarred ? 'Yes' : 'No'}</p>\n        <p>Deck Cards: {cards.length}</p>\n      </div>\n      \n      <div className=\"cards-grid\">\n        {visibleCards.map((card, index) => {\n          const cardIndex = cards.findIndex(c => c.id === card.id);\n          const isCardStarred = starredCardIds.includes(card.id);\n          \n          return (\n            <div key={card.id} ref={cardContainerRefs.current[cardIndex]}>\n              <Flashcard\n                ref={cardRefs.current[cardIndex]}\n                videoUrl={card.video_url}\n                answer={card.answer}\n                showInstructions={showInstructions}\n                onFirstFlip={handleFirstFlip}\n                isHighlighted={card.id === highlightedCardId}\n                onCardInteraction={handleCardInteraction}\n                cardId={card.id}\n                isStarred={isCardStarred}\n                onStarToggle={handleStarToggle}\n              />\n            </div>\n          );\n        })}\n        \n        {/* Loading trigger element */}\n        {hasMoreCards && (\n          <div \n            ref={loadMoreTriggerRef} \n            className=\"load-more-trigger\"\n            style={{ width: '100%', height: '20px', margin: '20px 0' }}\n          >\n            {loading && <div className=\"loading-indicator\">Loading more cards...</div>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Deck; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}