{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Deck.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef, createRef, useCallback } from 'react';\nimport Flashcard from './Flashcard';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './Deck.css'; // We'll create this for the back button\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARDS_PER_PAGE = 20; // Number of cards to display at once\n\nconst Deck = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [visibleCards, setVisibleCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [showInstructions, setShowInstructions] = useState(() => {\n    // Check localStorage for saved preference\n    const savedPreference = localStorage.getItem('showFlipInstructions');\n    return savedPreference === null ? true : savedPreference === 'true';\n  });\n  const [areAllFlipped, setAreAllFlipped] = useState(false);\n  const [highlightedCardId, setHighlightedCardId] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMoreCards, setHasMoreCards] = useState(true);\n  const [starredCardIds, setStarredCardIds] = useState([]);\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const cardRefs = useRef([]);\n  const cardContainerRefs = useRef([]);\n  const observerRef = useRef(null);\n  const loadMoreTriggerRef = useRef(null);\n\n  // Load starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // Use a lightweight endpoint to just get the starred card IDs\n        // In a real app, you'd get the actual user ID from auth\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        setStarredCardIds(response.data.cardIds || []);\n      } catch (err) {\n        console.error(\"Error fetching starred cards:\", err);\n        // Don't set an error state, just use an empty array\n        setStarredCardIds([]);\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n    fetchStarredCards();\n  }, []);\n\n  // Handle starring/unstarring cards\n  const handleStarToggle = async (cardId, isStarred) => {\n    try {\n      // In a real app, you'd get the actual user ID from auth\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n      if (isStarred) {\n        // Star the card\n        await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, {\n          userId: demoUserId\n        });\n        setStarredCardIds(prev => [...prev, cardId]);\n      } else {\n        // Unstar the card\n        await axios.delete(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, {\n          data: {\n            userId: demoUserId\n          }\n        });\n        setStarredCardIds(prev => prev.filter(id => id !== cardId));\n      }\n    } catch (err) {\n      console.error(`Error ${isStarred ? 'starring' : 'unstarring'} card:`, err);\n      // Revert the UI state if the API call fails\n      if (isStarred) {\n        setStarredCardIds(prev => prev.filter(id => id !== cardId));\n      } else {\n        setStarredCardIds(prev => [...prev, cardId]);\n      }\n    }\n  };\n\n  // Load more cards when user scrolls near the bottom\n  const loadMoreCards = useCallback(() => {\n    if (!loading && hasMoreCards) {\n      const nextPage = currentPage + 1;\n      const startIndex = (nextPage - 1) * CARDS_PER_PAGE;\n      const endIndex = startIndex + CARDS_PER_PAGE;\n\n      // Check if we have more cards to load\n      if (startIndex < cards.length) {\n        const nextBatch = cards.slice(startIndex, endIndex);\n        setVisibleCards(prevCards => [...prevCards, ...nextBatch]);\n        setCurrentPage(nextPage);\n        setHasMoreCards(endIndex < cards.length);\n      } else {\n        setHasMoreCards(false);\n      }\n    }\n  }, [loading, hasMoreCards, currentPage, cards]);\n\n  // Set up intersection observer for infinite scrolling\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '100px',\n      threshold: 0.1\n    };\n    observerRef.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        loadMoreCards();\n      }\n    }, options);\n    if (loadMoreTriggerRef.current) {\n      observerRef.current.observe(loadMoreTriggerRef.current);\n    }\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [loadMoreCards]);\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        const fetchedCards = response.data;\n        setCards(fetchedCards);\n\n        // Initialize with first page of cards\n        const initialCards = fetchedCards.slice(0, CARDS_PER_PAGE);\n        setVisibleCards(initialCards);\n        setHasMoreCards(fetchedCards.length > CARDS_PER_PAGE);\n\n        // Create refs for visible cards\n        cardRefs.current = Array(fetchedCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n        cardContainerRefs.current = Array(fetchedCards.length).fill(null).map(() => /*#__PURE__*/createRef());\n        setLoading(false);\n\n        // Check if coming from search with a highlight card ID\n        if (location.state) {\n          const {\n            highlightCardId\n          } = location.state;\n          if (highlightCardId) {\n            setHighlightedCardId(highlightCardId);\n\n            // Find the card index\n            const cardIndex = fetchedCards.findIndex(card => card.id === highlightCardId);\n\n            // Calculate what page the card is on\n            if (cardIndex !== -1) {\n              const cardPage = Math.floor(cardIndex / CARDS_PER_PAGE) + 1;\n\n              // Load all pages up to the card's page\n              if (cardPage > 1) {\n                const cardsToShow = fetchedCards.slice(0, cardPage * CARDS_PER_PAGE);\n                setVisibleCards(cardsToShow);\n                setCurrentPage(cardPage);\n                setHasMoreCards(cardPage * CARDS_PER_PAGE < fetchedCards.length);\n              }\n\n              // Wait for rendering then scroll to the highlighted card\n              setTimeout(() => {\n                var _cardContainerRefs$cu;\n                if ((_cardContainerRefs$cu = cardContainerRefs.current[cardIndex]) !== null && _cardContainerRefs$cu !== void 0 && _cardContainerRefs$cu.current) {\n                  var _cardContainerRefs$cu2;\n                  (_cardContainerRefs$cu2 = cardContainerRefs.current[cardIndex].current) === null || _cardContainerRefs$cu2 === void 0 ? void 0 : _cardContainerRefs$cu2.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                  });\n                }\n              }, 300);\n            }\n          }\n        }\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n    fetchCards();\n  }, [deckId, location.state]);\n  const handleBackClick = () => {\n    navigate('/');\n  };\n  const handleTestClick = () => {\n    navigate(`/test/${deckId}`);\n  };\n  const handleStarredTestClick = () => {\n    navigate(`/test/${deckId}`, {\n      state: {\n        starredOnly: true\n      }\n    });\n  };\n  const handleFirstFlip = () => {\n    // When any card is flipped for the first time, hide instructions on all cards\n    setShowInstructions(false);\n    // Save preference to localStorage\n    localStorage.setItem('showFlipInstructions', 'false');\n  };\n  const handleFlipAll = () => {\n    const newFlipState = !areAllFlipped;\n    cardRefs.current.forEach(ref => {\n      if (ref.current) {\n        ref.current.flip(newFlipState);\n      }\n    });\n    setAreAllFlipped(newFlipState);\n  };\n  const handleCardInteraction = cardId => {\n    // Remove the highlighting when card is interacted with\n    setHighlightedCardId(null);\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n  const hasStarredCards = visibleCards.some(card => starredCardIds.includes(card.id));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deck-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"back-button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: handleBackClick,\n        title: \"Back to Home\",\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deck-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"action-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button\",\n          onClick: handleFlipAll,\n          title: areAllFlipped ? \"Show Videos\" : \"Show Answers\",\n          children: areAllFlipped ? \"Show Videos\" : \"Show Answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button\",\n          onClick: handleTestClick,\n          title: \"Start Test\",\n          children: \"Test All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), hasStarredCards && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deck-button starred-test-button\",\n          onClick: handleStarredTestClick,\n          title: \"Test Starred Cards Only\",\n          children: \"Test Starred\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-grid\",\n      children: [visibleCards.map((card, index) => {\n        const cardIndex = cards.findIndex(c => c.id === card.id);\n        const isCardStarred = starredCardIds.includes(card.id);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: cardContainerRefs.current[cardIndex],\n          children: /*#__PURE__*/_jsxDEV(Flashcard, {\n            ref: cardRefs.current[cardIndex],\n            videoUrl: card.video_url,\n            answer: card.answer,\n            showInstructions: showInstructions,\n            onFirstFlip: handleFirstFlip,\n            isHighlighted: card.id === highlightedCardId,\n            onCardInteraction: handleCardInteraction,\n            cardId: card.id,\n            isStarred: isCardStarred,\n            onStarToggle: handleStarToggle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 15\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this);\n      }), hasMoreCards && /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreTriggerRef,\n        className: \"load-more-trigger\",\n        style: {\n          width: '100%',\n          height: '20px',\n          margin: '20px 0'\n        },\n        children: loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-indicator\",\n          children: \"Loading more cards...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n};\n_s(Deck, \"1cDCEKde95X9YweFNgko6eo2kpg=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useEffect","useState","useRef","createRef","useCallback","Flashcard","axios","useNavigate","useLocation","jsxDEV","_jsxDEV","CARDS_PER_PAGE","Deck","deckId","_s","cards","setCards","visibleCards","setVisibleCards","loading","setLoading","error","setError","showInstructions","setShowInstructions","savedPreference","localStorage","getItem","areAllFlipped","setAreAllFlipped","highlightedCardId","setHighlightedCardId","currentPage","setCurrentPage","hasMoreCards","setHasMoreCards","starredCardIds","setStarredCardIds","loadingStarred","setLoadingStarred","navigate","location","cardRefs","cardContainerRefs","observerRef","loadMoreTriggerRef","fetchStarredCards","demoUserId","response","get","process","env","REACT_APP_API_URL","data","cardIds","err","console","handleStarToggle","cardId","isStarred","post","userId","prev","delete","filter","id","loadMoreCards","nextPage","startIndex","endIndex","length","nextBatch","slice","prevCards","options","root","rootMargin","threshold","current","IntersectionObserver","entries","isIntersecting","observe","disconnect","fetchCards","fetchedCards","initialCards","Array","fill","map","state","highlightCardId","cardIndex","findIndex","card","cardPage","Math","floor","cardsToShow","setTimeout","_cardContainerRefs$cu","_cardContainerRefs$cu2","scrollIntoView","behavior","block","handleBackClick","handleTestClick","handleStarredTestClick","starredOnly","handleFirstFlip","setItem","handleFlipAll","newFlipState","forEach","ref","flip","handleCardInteraction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","hasStarredCards","some","includes","onClick","title","index","c","isCardStarred","videoUrl","video_url","answer","onFirstFlip","isHighlighted","onCardInteraction","onStarToggle","style","width","height","margin","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/Deck.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, createRef, useCallback } from 'react';\nimport Flashcard, { FlashcardHandle } from './Flashcard';\nimport axios from 'axios';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport './Deck.css'; // We'll create this for the back button\n\ninterface Card {\n  id: string;\n  video_url: string;\n  answer: string;\n  deck_id: string;\n}\n\ninterface DeckProps {\n  deckId: string;\n}\n\nconst CARDS_PER_PAGE = 20; // Number of cards to display at once\n\nconst Deck: React.FC<DeckProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [visibleCards, setVisibleCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showInstructions, setShowInstructions] = useState(() => {\n    // Check localStorage for saved preference\n    const savedPreference = localStorage.getItem('showFlipInstructions');\n    return savedPreference === null ? true : savedPreference === 'true';\n  });\n  const [areAllFlipped, setAreAllFlipped] = useState(false);\n  const [highlightedCardId, setHighlightedCardId] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMoreCards, setHasMoreCards] = useState(true);\n  const [starredCardIds, setStarredCardIds] = useState<string[]>([]);\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const cardRefs = useRef<(React.RefObject<FlashcardHandle>)[]>([]);\n  const cardContainerRefs = useRef<(React.RefObject<HTMLDivElement>)[]>([]);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const loadMoreTriggerRef = useRef<HTMLDivElement>(null);\n\n  // Load starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // Use a lightweight endpoint to just get the starred card IDs\n        // In a real app, you'd get the actual user ID from auth\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n        setStarredCardIds(response.data.cardIds || []);\n      } catch (err) {\n        console.error(\"Error fetching starred cards:\", err);\n        // Don't set an error state, just use an empty array\n        setStarredCardIds([]);\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n\n    fetchStarredCards();\n  }, []);\n\n  // Handle starring/unstarring cards\n  const handleStarToggle = async (cardId: string, isStarred: boolean) => {\n    try {\n      // In a real app, you'd get the actual user ID from auth\n      const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n      \n      if (isStarred) {\n        // Star the card\n        await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, { userId: demoUserId });\n        setStarredCardIds(prev => [...prev, cardId]);\n      } else {\n        // Unstar the card\n        await axios.delete(`${process.env.REACT_APP_API_URL}/api/cards/${cardId}/star`, { \n          data: { userId: demoUserId } \n        });\n        setStarredCardIds(prev => prev.filter(id => id !== cardId));\n      }\n    } catch (err) {\n      console.error(`Error ${isStarred ? 'starring' : 'unstarring'} card:`, err);\n      // Revert the UI state if the API call fails\n      if (isStarred) {\n        setStarredCardIds(prev => prev.filter(id => id !== cardId));\n      } else {\n        setStarredCardIds(prev => [...prev, cardId]);\n      }\n    }\n  };\n\n  // Load more cards when user scrolls near the bottom\n  const loadMoreCards = useCallback(() => {\n    if (!loading && hasMoreCards) {\n      const nextPage = currentPage + 1;\n      const startIndex = (nextPage - 1) * CARDS_PER_PAGE;\n      const endIndex = startIndex + CARDS_PER_PAGE;\n      \n      // Check if we have more cards to load\n      if (startIndex < cards.length) {\n        const nextBatch = cards.slice(startIndex, endIndex);\n        setVisibleCards(prevCards => [...prevCards, ...nextBatch]);\n        setCurrentPage(nextPage);\n        setHasMoreCards(endIndex < cards.length);\n      } else {\n        setHasMoreCards(false);\n      }\n    }\n  }, [loading, hasMoreCards, currentPage, cards]);\n\n  // Set up intersection observer for infinite scrolling\n  useEffect(() => {\n    const options = {\n      root: null,\n      rootMargin: '100px',\n      threshold: 0.1\n    };\n    \n    observerRef.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting) {\n        loadMoreCards();\n      }\n    }, options);\n    \n    if (loadMoreTriggerRef.current) {\n      observerRef.current.observe(loadMoreTriggerRef.current);\n    }\n    \n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [loadMoreCards]);\n\n  useEffect(() => {\n    const fetchCards = async () => {\n      try {\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/cards/${deckId}`);\n        const fetchedCards = response.data;\n        setCards(fetchedCards);\n        \n        // Initialize with first page of cards\n        const initialCards = fetchedCards.slice(0, CARDS_PER_PAGE);\n        setVisibleCards(initialCards);\n        setHasMoreCards(fetchedCards.length > CARDS_PER_PAGE);\n        \n        // Create refs for visible cards\n        cardRefs.current = Array(fetchedCards.length)\n          .fill(null)\n          .map(() => createRef<FlashcardHandle>() as React.RefObject<FlashcardHandle>);\n\n        cardContainerRefs.current = Array(fetchedCards.length)\n          .fill(null)\n          .map(() => createRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>);\n        \n        setLoading(false);\n        \n        // Check if coming from search with a highlight card ID\n        if (location.state) {\n          const { highlightCardId } = location.state as { fromSearch?: boolean, highlightCardId?: string };\n          \n          if (highlightCardId) {\n            setHighlightedCardId(highlightCardId);\n            \n            // Find the card index\n            const cardIndex = fetchedCards.findIndex((card: Card) => card.id === highlightCardId);\n            \n            // Calculate what page the card is on\n            if (cardIndex !== -1) {\n              const cardPage = Math.floor(cardIndex / CARDS_PER_PAGE) + 1;\n              \n              // Load all pages up to the card's page\n              if (cardPage > 1) {\n                const cardsToShow = fetchedCards.slice(0, cardPage * CARDS_PER_PAGE);\n                setVisibleCards(cardsToShow);\n                setCurrentPage(cardPage);\n                setHasMoreCards(cardPage * CARDS_PER_PAGE < fetchedCards.length);\n              }\n              \n              // Wait for rendering then scroll to the highlighted card\n              setTimeout(() => {\n                if (cardContainerRefs.current[cardIndex]?.current) {\n                  cardContainerRefs.current[cardIndex].current?.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'center'\n                  });\n                }\n              }, 300);\n            }\n          }\n        }\n      } catch (err) {\n        setError('Failed to load cards');\n        setLoading(false);\n      }\n    };\n\n    fetchCards();\n  }, [deckId, location.state]);\n\n  const handleBackClick = () => {\n    navigate('/');\n  };\n\n  const handleTestClick = () => {\n    navigate(`/test/${deckId}`);\n  };\n\n  const handleStarredTestClick = () => {\n    navigate(`/test/${deckId}`, { state: { starredOnly: true } });\n  };\n\n  const handleFirstFlip = () => {\n    // When any card is flipped for the first time, hide instructions on all cards\n    setShowInstructions(false);\n    // Save preference to localStorage\n    localStorage.setItem('showFlipInstructions', 'false');\n  };\n\n  const handleFlipAll = () => {\n    const newFlipState = !areAllFlipped;\n    cardRefs.current.forEach(ref => {\n      if (ref.current) {\n        ref.current.flip(newFlipState);\n      }\n    });\n    setAreAllFlipped(newFlipState);\n  };\n\n  const handleCardInteraction = (cardId: string) => {\n    // Remove the highlighting when card is interacted with\n    setHighlightedCardId(null);\n  };\n\n  if (loading) return (\n    <div className=\"loading-container\">\n      <div>Loading...</div>\n    </div>\n  );\n  \n  if (error) return (\n    <div className=\"error-container\">\n      <div>Error: {error}</div>\n    </div>\n  );\n\n  const hasStarredCards = visibleCards.some(card => starredCardIds.includes(card.id));\n\n  return (\n    <div className=\"deck-container\">\n      <div className=\"back-button-container\">\n        <button className=\"back-button\" onClick={handleBackClick} title=\"Back to Home\">\n          &#8592;\n        </button>\n      </div>\n      <div className=\"deck-actions\">\n        <div className=\"action-buttons\">\n          <button className=\"deck-button\" onClick={handleFlipAll} title={areAllFlipped ? \"Show Videos\" : \"Show Answers\"}>\n            {areAllFlipped ? \"Show Videos\" : \"Show Answers\"}\n          </button>\n          <button className=\"deck-button\" onClick={handleTestClick} title=\"Start Test\">\n            Test All\n          </button>\n          {hasStarredCards && (\n            <button \n              className=\"deck-button starred-test-button\" \n              onClick={handleStarredTestClick} \n              title=\"Test Starred Cards Only\"\n            >\n              Test Starred\n            </button>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"cards-grid\">\n        {visibleCards.map((card, index) => {\n          const cardIndex = cards.findIndex(c => c.id === card.id);\n          const isCardStarred = starredCardIds.includes(card.id);\n          \n          return (\n            <div key={card.id} ref={cardContainerRefs.current[cardIndex]}>\n              <Flashcard\n                ref={cardRefs.current[cardIndex]}\n                videoUrl={card.video_url}\n                answer={card.answer}\n                showInstructions={showInstructions}\n                onFirstFlip={handleFirstFlip}\n                isHighlighted={card.id === highlightedCardId}\n                onCardInteraction={handleCardInteraction}\n                cardId={card.id}\n                isStarred={isCardStarred}\n                onStarToggle={handleStarToggle}\n              />\n            </div>\n          );\n        })}\n        \n        {/* Loading trigger element */}\n        {hasMoreCards && (\n          <div \n            ref={loadMoreTriggerRef} \n            className=\"load-more-trigger\"\n            style={{ width: '100%', height: '20px', margin: '20px 0' }}\n          >\n            {loading && <div className=\"loading-indicator\">Loading more cards...</div>}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Deck; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}