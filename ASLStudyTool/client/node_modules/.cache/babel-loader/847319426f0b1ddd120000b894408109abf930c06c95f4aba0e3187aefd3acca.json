{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n};\nconst TestMode = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState('');\n  const [starredCardIds, setStarredCardIds] = useState([]);\n  const [testMode, setTestMode] = useState('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const [viewOnly, setViewOnly] = useState(false);\n  const [noCardsFeedback, setNoCardsFeedback] = useState(null);\n  const [showCancelButton, setShowCancelButton] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Timer to show cancel button after 5 seconds of loading\n  useEffect(() => {\n    let timeoutId;\n    if (loading || loadingStarred) {\n      // Start timer to show cancel button after 5 seconds\n      timeoutId = setTimeout(() => {\n        setShowCancelButton(true);\n        console.log('Loading taking too long, showing cancel button');\n      }, 5000);\n    } else {\n      setShowCancelButton(false);\n    }\n    return () => {\n      // Clear timeout when component unmounts or loading state changes\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [loading, loadingStarred]);\n\n  // Fetch starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n        // Add debugging to find issue\n        console.log(\"TestMode: Fetching starred cards...\");\n\n        // Check location state first if starred IDs were passed directly\n        if (location.state && location.state.starredCardIds) {\n          const passedStarredIds = location.state.starredCardIds;\n          console.log('TestMode: Using starred cards passed from navigation:', passedStarredIds);\n          setStarredCardIds(passedStarredIds);\n          setLoadingStarred(false);\n\n          // Set test mode if starredOnly flag is set\n          if (location.state.starredOnly) {\n            console.log(\"TestMode: Setting test mode to starred from navigation state\");\n            setTestMode('starred');\n          }\n          if (location.state.viewOnly) {\n            console.log(\"TestMode: Setting view-only mode from navigation state\");\n            setViewOnly(true);\n          }\n          return; // Exit early with passed values\n        }\n\n        // Check localStorage as second option\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('TestMode: Using localStorage starred cards:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n            setLoadingStarred(false);\n\n            // Check if we should only test starred cards\n            if (location.state) {\n              const state = location.state;\n              if (state.starredOnly) {\n                console.log(\"TestMode: Setting test mode to starred\");\n                setTestMode('starred');\n              }\n              if (state.viewOnly) {\n                console.log(\"TestMode: Setting view-only mode\");\n                setViewOnly(true);\n              }\n            }\n            return; // Exit early with localStorage values\n          } catch (parseErr) {\n            console.error('TestMode: Error parsing starred cards from localStorage:', parseErr);\n          }\n        }\n\n        // Try server as fallback\n        try {\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n          if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n            console.log(\"TestMode: Loaded starred cards from server:\", response.data.cardIds.length);\n            setStarredCardIds(response.data.cardIds || []);\n          } else {\n            console.log('TestMode: No starred cards found on server or localStorage');\n            setStarredCardIds([]);\n          }\n        } catch (serverErr) {\n          console.error(\"TestMode: Error fetching starred cards from server:\", serverErr);\n          setStarredCardIds([]);\n        }\n      } catch (err) {\n        console.error(\"TestMode: Error in starred card fetching logic:\", err);\n        setStarredCardIds([]);\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n    fetchStarredCards();\n\n    // We'll set this in the fetchStarredCards function to ensure it happens\n    // after the cards are loaded\n    // if (location.state && (location.state as any).starredOnly) {\n    //   setTestMode('starred');\n    // }\n  }, [location.state]);\n  useEffect(() => {\n    // Don't fetch if we don't have a deckId, starred card status is unclear, or already fetching\n    if (!deckId || loadingStarred || loading) {\n      return;\n    }\n    const fetchCards = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        console.log(`TestMode: Fetching cards for deck ${deckId}, mode: ${testMode}`);\n        const response = await fetch(`/api/decks/${deckId}/cards`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch cards\");\n        }\n        const data = await response.json();\n        console.log(`TestMode: Total cards in deck: ${data.length}`);\n        console.log(`TestMode: Current mode: ${testMode}`);\n        console.log(`TestMode: Starred card IDs: ${JSON.stringify(starredCardIds)}`);\n\n        // Filter cards based on the testMode\n        let filteredCards = [...data];\n        if (testMode === 'starred') {\n          if (!starredCardIds || starredCardIds.length === 0) {\n            console.log('TestMode: No starred cards found, showing empty set');\n            setNoCardsFeedback('No starred cards found. Please star some cards and try again.');\n            filteredCards = [];\n          } else {\n            console.log(`TestMode: Filtering for ${starredCardIds.length} starred cards`);\n            filteredCards = data.filter(card => starredCardIds.includes(card.id));\n            console.log(`TestMode: Found ${filteredCards.length} starred cards in deck`);\n            if (filteredCards.length === 0) {\n              setNoCardsFeedback('No starred cards found in this deck. Please star some cards and try again.');\n            }\n          }\n        }\n\n        // Shuffle the cards\n        const shuffledCards = shuffleArray(filteredCards);\n        console.log(`TestMode: Final count of cards for testing: ${shuffledCards.length}`);\n        setCards(shuffledCards);\n        setLoading(false);\n      } catch (error) {\n        console.error('TestMode: Error fetching cards:', error);\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    fetchCards();\n  }, [deckId, testMode, starredCardIds, loadingStarred]);\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n  const transformGoogleDriveUrl = url => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n\n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    return url;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n      const isCorrect = userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n\n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n\n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n\n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n\n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, {\n              userId: demoUserId\n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      setSubmitted(true);\n    }\n  };\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n  const handleCancel = () => {\n    console.log('User canceled loading, returning to deck');\n    handleBackToDeck();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading test...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), showCancelButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancel,\n        className: \"cancel-btn\",\n        style: {\n          marginTop: '20px',\n          padding: '8px 16px',\n          background: '#f44336',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }, this);\n  }\n  if (cards.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No Cards Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this), testMode === 'starred' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: noCardsFeedback || 'You don\\'t have any starred cards in this deck yet. Star some cards first or try the full test.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: '#333',\n            padding: '10px',\n            borderRadius: '5px',\n            margin: '20px 0',\n            fontSize: '12px',\n            textAlign: 'left'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Debug Info:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Starred Card IDs: \", starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Deck ID: \", deckId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Test Mode: \", testMode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Loading Starred: \", loadingStarred ? 'true' : 'false']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              // Check localStorage\n              const local = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n              console.log('localStorage starred cards:', local);\n              alert('localStorage starred cards: ' + (local || 'none'));\n            },\n            children: \"Check Local Storage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This deck doesn't have any cards to test with.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this);\n  }\n  if (testComplete || viewOnly) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round(results.correct.length / totalCards * 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container results\",\n      children: [viewOnly ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Starred Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, this), !viewOnly && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [\"Score: \", score, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"correct-count\",\n            children: [results.correct.length, \" correct\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"incorrect-count\",\n            children: [results.incorrect.length, \" incorrect\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 11\n      }, this), viewOnly && cards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"all-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Your Starred Cards (\", cards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"results-list\",\n          children: cards.map(card => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"result-item\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-answer\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: card.answer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 19\n            }, this)\n          }, card.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this), !viewOnly && results.incorrect.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"incorrect-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Incorrect Answers (Automatically Starred)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"results-list\",\n          children: results.incorrect.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"result-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Correct answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 21\n              }, this), \" \", card.answer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-user-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Your answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 21\n              }, this), \" \", results.userAnswers[results.correct.length + index]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 19\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-actions\",\n        children: [!viewOnly && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartOver,\n          className: \"start-over-btn\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToDeck,\n          className: \"back-to-deck-btn\",\n          children: \"Back to Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this);\n  }\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-btn\",\n        children: \"\\u2190 Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ASL Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: [currentCardIndex + 1, \" of \", cards.length, testMode === 'starred' && ' (Starred Cards Only)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: videoSource && (videoSource.includes('/preview') ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          allow: \"autoplay\",\n          allowFullScreen: true,\n          style: {\n            border: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          url: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          controls: true,\n          playing: !submitted,\n          config: {\n            file: {\n              attributes: {\n                controlsList: 'nodownload',\n                disablePictureInPicture: true\n              },\n              forceVideo: true\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), !submitted ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"answer-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"answer\",\n            children: \"What is the sign?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"answer\",\n            type: \"text\",\n            value: userAnswer,\n            onChange: e => setUserAnswer(e.target.value),\n            placeholder: \"Type your answer here\",\n            autoComplete: \"off\",\n            autoFocus: true,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `feedback ${isCorrect ? 'correct' : 'incorrect'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isCorrect ? 'Correct!' : 'Incorrect'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The correct answer is: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 38\n          }, this), !isCorrect && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"auto-starred\",\n            children: \" (Auto-starred for review)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextCard,\n          className: \"next-btn\",\n          children: currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n};\n_s(TestMode, \"2eZOYWcrA5MhLEGJKkZjRd1eHu8=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = TestMode;\nexport default TestMode;\nvar _c;\n$RefreshReg$(_c, \"TestMode\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","axios","ReactPlayer","LOCAL_STORAGE_STARRED_KEY","jsxDEV","_jsxDEV","Fragment","_Fragment","shuffleArray","array","newArray","i","length","j","Math","floor","random","TestMode","deckId","_s","cards","setCards","loading","setLoading","error","setError","currentCardIndex","setCurrentCardIndex","userAnswer","setUserAnswer","submitted","setSubmitted","testComplete","setTestComplete","results","setResults","correct","incorrect","userAnswers","videoSource","setVideoSource","starredCardIds","setStarredCardIds","testMode","setTestMode","loadingStarred","setLoadingStarred","viewOnly","setViewOnly","noCardsFeedback","setNoCardsFeedback","showCancelButton","setShowCancelButton","navigate","location","timeoutId","setTimeout","console","log","clearTimeout","fetchStarredCards","demoUserId","state","passedStarredIds","starredOnly","localStarred","localStorage","getItem","parsedStarred","JSON","parse","parseErr","response","get","process","env","REACT_APP_API_URL","data","cardIds","serverErr","err","fetchCards","fetch","ok","Error","json","stringify","filteredCards","filter","card","includes","id","shuffledCards","message","currentCard","video_url","transformedUrl","transformGoogleDriveUrl","handleKeyPress","e","key","handleNextCard","window","addEventListener","removeEventListener","url","fileId","match","handleSubmit","preventDefault","isCorrect","trim","toLowerCase","answer","prevResults","newStarredIds","setItem","post","userId","handleBackToDeck","handleStartOver","handleCancel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","marginTop","padding","background","color","border","borderRadius","cursor","margin","fontSize","textAlign","join","local","alert","totalCards","score","round","map","index","src","width","height","allow","allowFullScreen","controls","playing","config","file","attributes","controlsList","disablePictureInPicture","forceVideo","onSubmit","htmlFor","type","value","onChange","target","placeholder","autoComplete","autoFocus","required","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\nimport { Card } from '../types/Card';\n\ninterface TestModeProps {\n  deckId: string;\n}\n\nconst shuffleArray = <T extends unknown>(array: T[]): T[] => {\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n};\n\nconst TestMode: React.FC<TestModeProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState<{ correct: Card[], incorrect: Card[], userAnswers: string[] }>({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState<string>('');\n  const [starredCardIds, setStarredCardIds] = useState<string[]>([]);\n  const [testMode, setTestMode] = useState<'all' | 'starred'>('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const [viewOnly, setViewOnly] = useState(false);\n  const [noCardsFeedback, setNoCardsFeedback] = useState<string | null>(null);\n  const [showCancelButton, setShowCancelButton] = useState(false);\n  \n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Timer to show cancel button after 5 seconds of loading\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n    \n    if (loading || loadingStarred) {\n      // Start timer to show cancel button after 5 seconds\n      timeoutId = setTimeout(() => {\n        setShowCancelButton(true);\n        console.log('Loading taking too long, showing cancel button');\n      }, 5000);\n    } else {\n      setShowCancelButton(false);\n    }\n    \n    return () => {\n      // Clear timeout when component unmounts or loading state changes\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [loading, loadingStarred]);\n\n  // Fetch starred cards\n  useEffect(() => {\n    const fetchStarredCards = async () => {\n      try {\n        // First try to get from server\n        const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n        \n        // Add debugging to find issue\n        console.log(\"TestMode: Fetching starred cards...\");\n        \n        // Check location state first if starred IDs were passed directly\n        if (location.state && (location.state as any).starredCardIds) {\n          const passedStarredIds = (location.state as any).starredCardIds;\n          console.log('TestMode: Using starred cards passed from navigation:', passedStarredIds);\n          setStarredCardIds(passedStarredIds);\n          setLoadingStarred(false);\n          \n          // Set test mode if starredOnly flag is set\n          if ((location.state as any).starredOnly) {\n            console.log(\"TestMode: Setting test mode to starred from navigation state\");\n            setTestMode('starred');\n          }\n          \n          if ((location.state as any).viewOnly) {\n            console.log(\"TestMode: Setting view-only mode from navigation state\");\n            setViewOnly(true);\n          }\n          \n          return; // Exit early with passed values\n        }\n        \n        // Check localStorage as second option\n        const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n        if (localStarred) {\n          try {\n            const parsedStarred = JSON.parse(localStarred);\n            console.log('TestMode: Using localStorage starred cards:', parsedStarred);\n            setStarredCardIds(parsedStarred);\n            setLoadingStarred(false);\n            \n            // Check if we should only test starred cards\n            if (location.state) {\n              const state = location.state as any;\n              if (state.starredOnly) {\n                console.log(\"TestMode: Setting test mode to starred\");\n                setTestMode('starred');\n              }\n              if (state.viewOnly) {\n                console.log(\"TestMode: Setting view-only mode\");\n                setViewOnly(true);\n              }\n            }\n            return; // Exit early with localStorage values\n          } catch (parseErr) {\n            console.error('TestMode: Error parsing starred cards from localStorage:', parseErr);\n          }\n        }\n        \n        // Try server as fallback\n        try {\n          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/users/${demoUserId}/starred-card-ids`);\n          \n          if (response.data && response.data.cardIds && response.data.cardIds.length > 0) {\n            console.log(\"TestMode: Loaded starred cards from server:\", response.data.cardIds.length);\n            setStarredCardIds(response.data.cardIds || []);\n          } else {\n            console.log('TestMode: No starred cards found on server or localStorage');\n            setStarredCardIds([]);\n          }\n        } catch (serverErr) {\n          console.error(\"TestMode: Error fetching starred cards from server:\", serverErr);\n          setStarredCardIds([]);\n        }\n      } catch (err) {\n        console.error(\"TestMode: Error in starred card fetching logic:\", err);\n        setStarredCardIds([]);\n      } finally {\n        setLoadingStarred(false);\n      }\n    };\n\n    fetchStarredCards();\n    \n    // We'll set this in the fetchStarredCards function to ensure it happens\n    // after the cards are loaded\n    // if (location.state && (location.state as any).starredOnly) {\n    //   setTestMode('starred');\n    // }\n  }, [location.state]);\n\n  useEffect(() => {\n    // Don't fetch if we don't have a deckId, starred card status is unclear, or already fetching\n    if (!deckId || loadingStarred || loading) {\n      return;\n    }\n\n    const fetchCards = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        console.log(`TestMode: Fetching cards for deck ${deckId}, mode: ${testMode}`);\n\n        const response = await fetch(`/api/decks/${deckId}/cards`);\n\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch cards\");\n        }\n\n        const data = await response.json();\n        \n        console.log(`TestMode: Total cards in deck: ${data.length}`);\n        console.log(`TestMode: Current mode: ${testMode}`);\n        console.log(`TestMode: Starred card IDs: ${JSON.stringify(starredCardIds)}`);\n\n        // Filter cards based on the testMode\n        let filteredCards = [...data];\n\n        if (testMode === 'starred') {\n          if (!starredCardIds || starredCardIds.length === 0) {\n            console.log('TestMode: No starred cards found, showing empty set');\n            setNoCardsFeedback('No starred cards found. Please star some cards and try again.');\n            filteredCards = [];\n          } else {\n            console.log(`TestMode: Filtering for ${starredCardIds.length} starred cards`);\n            filteredCards = data.filter((card: Card) => starredCardIds.includes(card.id));\n            console.log(`TestMode: Found ${filteredCards.length} starred cards in deck`);\n            \n            if (filteredCards.length === 0) {\n              setNoCardsFeedback('No starred cards found in this deck. Please star some cards and try again.');\n            }\n          }\n        }\n\n        // Shuffle the cards\n        const shuffledCards = shuffleArray(filteredCards);\n        console.log(`TestMode: Final count of cards for testing: ${shuffledCards.length}`);\n        \n        setCards(shuffledCards);\n        setLoading(false);\n\n      } catch (error: any) {\n        console.error('TestMode: Error fetching cards:', error);\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n\n    fetchCards();\n  }, [deckId, testMode, starredCardIds, loadingStarred]);\n\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n\n  const transformGoogleDriveUrl = (url: string): string => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n      \n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      \n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    \n    return url;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n      const isCorrect = userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n      \n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n        \n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n            \n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n            \n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n            \n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, { \n              userId: demoUserId \n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      \n      setSubmitted(true);\n    }\n  };\n\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n\n  const handleCancel = () => {\n    console.log('User canceled loading, returning to deck');\n    handleBackToDeck();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"test-container loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading test...</p>\n        {showCancelButton && (\n          <button \n            onClick={handleCancel} \n            className=\"cancel-btn\"\n            style={{\n              marginTop: '20px',\n              padding: '8px 16px',\n              background: '#f44336',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Cancel\n          </button>\n        )}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"test-container error\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (cards.length === 0) {\n    return (\n      <div className=\"test-container error\">\n        <h2>No Cards Available</h2>\n        {testMode === 'starred' ? (\n          <>\n            <p>{noCardsFeedback || 'You don\\'t have any starred cards in this deck yet. Star some cards first or try the full test.'}</p>\n            {/* Debug information */}\n            <div style={{ \n              background: '#333', \n              padding: '10px', \n              borderRadius: '5px', \n              margin: '20px 0', \n              fontSize: '12px',\n              textAlign: 'left'\n            }}>\n              <p>Debug Info:</p>\n              <p>Starred Card IDs: {starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None'}</p>\n              <p>Deck ID: {deckId}</p>\n              <p>Test Mode: {testMode}</p>\n              <p>Loading Starred: {loadingStarred ? 'true' : 'false'}</p>\n              <button onClick={() => {\n                // Check localStorage\n                const local = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n                console.log('localStorage starred cards:', local);\n                alert('localStorage starred cards: ' + (local || 'none'));\n              }}>Check Local Storage</button>\n            </div>\n          </>\n        ) : (\n          <p>This deck doesn't have any cards to test with.</p>\n        )}\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (testComplete || viewOnly) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round((results.correct.length / totalCards) * 100);\n    \n    return (\n      <div className=\"test-container results\">\n        {viewOnly ? (\n          <h2>All Starred Cards</h2>\n        ) : (\n          <h2>Test Complete!</h2>\n        )}\n        \n        {!viewOnly && (\n          <div className=\"test-summary\">\n            <div className=\"score\">Score: {score}%</div>\n            <div className=\"stats\">\n              <div className=\"correct-count\">{results.correct.length} correct</div>\n              <div className=\"incorrect-count\">{results.incorrect.length} incorrect</div>\n            </div>\n          </div>\n        )}\n        \n        {/* Show all cards in view mode */}\n        {viewOnly && cards.length > 0 && (\n          <div className=\"all-cards\">\n            <h3>Your Starred Cards ({cards.length})</h3>\n            <ul className=\"results-list\">\n              {cards.map((card) => (\n                <li key={card.id} className=\"result-item\">\n                  <div className=\"result-answer\">\n                    <strong>{card.answer}</strong>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        {/* Show incorrect answers in test mode */}\n        {!viewOnly && results.incorrect.length > 0 && (\n          <div className=\"incorrect-cards\">\n            <h3>Incorrect Answers (Automatically Starred)</h3>\n            <ul className=\"results-list\">\n              {results.incorrect.map((card, index) => (\n                <li key={card.id} className=\"result-item\">\n                  <div className=\"result-answer\">\n                    <strong>Correct answer:</strong> {card.answer}\n                  </div>\n                  <div className=\"result-user-answer\">\n                    <strong>Your answer:</strong> {results.userAnswers[results.correct.length + index]}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        <div className=\"test-actions\">\n          {!viewOnly && (\n            <button onClick={handleStartOver} className=\"start-over-btn\">\n              Start Over\n            </button>\n          )}\n          <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n            Back to Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  \n  return (\n    <div className=\"test-container\">\n      <div className=\"test-header\">\n        <button onClick={handleBackToDeck} className=\"back-btn\">\n          &larr; Back to Deck\n        </button>\n        <h1>ASL Test</h1>\n        <div className=\"progress\">\n          {currentCardIndex + 1} of {cards.length}\n          {testMode === 'starred' && ' (Starred Cards Only)'}\n        </div>\n      </div>\n\n      <div className=\"test-content\">\n        <div className=\"video-container\">\n          {videoSource && (\n            videoSource.includes('/preview') ? (\n              <iframe \n                src={videoSource}\n                width=\"100%\" \n                height=\"100%\" \n                allow=\"autoplay\" \n                allowFullScreen\n                style={{ border: 'none' }}\n              ></iframe>\n            ) : (\n              <ReactPlayer\n                url={videoSource}\n                width=\"100%\"\n                height=\"100%\"\n                controls\n                playing={!submitted}\n                config={{\n                  file: {\n                    attributes: {\n                      controlsList: 'nodownload',\n                      disablePictureInPicture: true\n                    },\n                    forceVideo: true\n                  }\n                }}\n              />\n            )\n          )}\n        </div>\n\n        {!submitted ? (\n          <form onSubmit={handleSubmit} className=\"answer-form\">\n            <div className=\"input-group\">\n              <label htmlFor=\"answer\">What is the sign?</label>\n              <input\n                id=\"answer\"\n                type=\"text\"\n                value={userAnswer}\n                onChange={(e) => setUserAnswer(e.target.value)}\n                placeholder=\"Type your answer here\"\n                autoComplete=\"off\"\n                autoFocus\n                required\n              />\n            </div>\n            <button type=\"submit\" className=\"submit-btn\">\n              Submit\n            </button>\n          </form>\n        ) : (\n          <div className={`feedback ${isCorrect ? 'correct' : 'incorrect'}`}>\n            <h2>\n              {isCorrect ? 'Correct!' : 'Incorrect'}\n            </h2>\n            <p>\n              The correct answer is: <strong>{currentCard.answer}</strong>\n              {!isCorrect && <span className=\"auto-starred\"> (Auto-starred for review)</span>}\n            </p>\n            <button onClick={handleNextCard} className=\"next-btn\">\n              {currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TestMode; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}