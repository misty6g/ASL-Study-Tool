{"ast":null,"code":"var _jsxFileName = \"/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n};\nconst TestMode = ({\n  deckId\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState('');\n  const [starredCardIds, setStarredCardIds] = useState([]);\n  const [testMode, setTestMode] = useState('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const [viewOnly, setViewOnly] = useState(false);\n  const [noCardsFeedback, setNoCardsFeedback] = useState(null);\n  const [showCancelButton, setShowCancelButton] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Timer to show cancel button after 5 seconds of loading\n  useEffect(() => {\n    let timeoutId;\n    if (loading || loadingStarred) {\n      // Start timer to show cancel button after 5 seconds\n      timeoutId = setTimeout(() => {\n        setShowCancelButton(true);\n        console.log('Loading taking too long, showing cancel button');\n      }, 5000);\n    } else {\n      setShowCancelButton(false);\n    }\n    return () => {\n      // Clear timeout when component unmounts or loading state changes\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [loading, loadingStarred]);\n\n  // Completely rewritten card fetching logic\n  useEffect(() => {\n    // Check if cards were passed directly in the navigation state\n    if (location.state && location.state.cards) {\n      try {\n        // Get cards from state with type assertion\n        const stateCards = location.state.cards;\n\n        // Ensure each card has the required properties of the Card interface\n        const passedCards = stateCards.map(card => ({\n          id: card.id,\n          video_url: card.video_url,\n          answer: card.answer,\n          deck_id: card.deck_id\n        }));\n        console.log(`TestMode: Using ${passedCards.length} cards passed directly from navigation`);\n\n        // If we're in starred mode, the cards are already filtered\n        if (testMode === 'starred' || location.state.starredOnly) {\n          console.log(`TestMode: Already filtered for starred cards (${passedCards.length} cards)`);\n          setTestMode('starred');\n        }\n\n        // Set view-only if specified\n        if (location.state.viewOnly) {\n          setViewOnly(true);\n        }\n\n        // Shuffle and set directly - skip all other fetching\n        const shuffledCards = shuffleArray(passedCards);\n        console.log(`TestMode: Set ${shuffledCards.length} shuffled cards for testing`);\n        setCards(shuffledCards);\n        setLoading(false);\n        return; // Exit early - we have everything we need\n      } catch (err) {\n        console.error('TestMode: Error processing cards from navigation state:', err);\n        // Continue to normal loading in case of error\n      }\n    }\n\n    // Only run this if we didn't exit early above with direct cards\n    if (!location.state || !location.state.cards) {\n      setLoading(true);\n      fetchCardsFromAPI();\n    }\n  }, [location.state]);\n\n  // Separate function for API fallback (legacy path)\n  const fetchCardsFromAPI = async () => {\n    console.log('TestMode: Attempting API fetch as fallback');\n    setError(null);\n\n    // Add a timeout to prevent infinite loading\n    const fetchTimeoutId = setTimeout(() => {\n      console.error('Card fetching timed out after 8 seconds');\n      setError('Loading timed out. Please try again.');\n      setLoading(false);\n    }, 8000);\n    try {\n      // Set mode from navigation state if present\n      if (location.state) {\n        if (location.state.starredOnly) {\n          console.log('TestMode: Setting starred mode from state');\n          setTestMode('starred');\n        }\n        if (location.state.viewOnly) {\n          setViewOnly(true);\n        }\n      }\n\n      // Get starred card IDs first if we need them\n      let starredIds = [];\n      if (testMode === 'starred' || location.state && location.state.starredOnly) {\n        // Try to get from state first\n        if (location.state && location.state.starredCardIds) {\n          starredIds = location.state.starredCardIds;\n          console.log(`TestMode: Using ${starredIds.length} starred IDs from navigation`);\n        } else {\n          // Fall back to localStorage\n          const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n          if (localStarred) {\n            starredIds = JSON.parse(localStarred);\n            console.log(`TestMode: Using ${starredIds.length} starred IDs from localStorage`);\n          }\n        }\n        setStarredCardIds(starredIds);\n      }\n      console.log(`TestMode: Fetching cards for deck ${deckId}`);\n\n      // Fetch the cards\n      const apiUrl = `/api/cards/${deckId}`;\n      console.log(`TestMode: Fetching from ${apiUrl}`);\n      const response = await fetch(apiUrl);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch cards (${response.status})`);\n      }\n      const rawData = await response.json();\n\n      // Ensure proper Card type\n      const data = rawData.map(card => ({\n        id: card.id,\n        video_url: card.video_url,\n        answer: card.answer,\n        deck_id: card.deck_id\n      }));\n      console.log(`TestMode: Got ${data.length} cards from API`);\n\n      // Filter if necessary\n      let filteredCards = data;\n      if (testMode === 'starred' || location.state && location.state.starredOnly) {\n        if (starredIds.length === 0) {\n          console.log('TestMode: No starred cards, showing empty set');\n          setNoCardsFeedback('No starred cards found. Please star some cards and try again.');\n          filteredCards = [];\n        } else {\n          filteredCards = data.filter(card => starredIds.includes(card.id));\n          console.log(`TestMode: Filtered to ${filteredCards.length} starred cards`);\n          if (filteredCards.length === 0) {\n            setNoCardsFeedback('No starred cards found in this deck. Please star some cards and try again.');\n          }\n        }\n      }\n\n      // Shuffle and set cards\n      const shuffledCards = shuffleArray(filteredCards);\n      console.log(`TestMode: Set ${shuffledCards.length} shuffled cards for testing`);\n      setCards(shuffledCards);\n    } catch (error) {\n      console.error('TestMode: Error fetching cards:', error);\n      setError(error.message || 'Failed to load cards. Please try again.');\n    } finally {\n      clearTimeout(fetchTimeoutId);\n      setLoading(false);\n      setLoadingStarred(false); // Also mark starred as done\n    }\n  };\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n  const transformGoogleDriveUrl = url => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n\n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    return url;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n\n      // New logic to handle slash-separated answers\n      const isCorrect = checkAnswer(userAnswer, currentCard.answer);\n\n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n\n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n\n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n\n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n\n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, {\n              userId: demoUserId\n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      setSubmitted(true);\n    }\n  };\n\n  // New helper function to check if an answer is correct, handling slash variants\n  const checkAnswer = (userInput, correctAnswer) => {\n    const userInputClean = userInput.trim().toLowerCase();\n    const correctAnswerClean = correctAnswer.trim().toLowerCase();\n\n    // Direct match\n    if (userInputClean === correctAnswerClean) {\n      console.log(\"TestMode: Exact match\");\n      return true;\n    }\n\n    // Check for slash in the correct answer\n    if (correctAnswerClean.includes('/')) {\n      console.log(\"TestMode: Slash detected in answer, checking alternatives\");\n\n      // Split the answer by slash and check each part\n      const answerVariants = correctAnswerClean.split('/').map(part => part.trim());\n      console.log(\"TestMode: Answer variants:\", answerVariants);\n\n      // Check if user's answer matches any of the variants\n      const matched = answerVariants.some(variant => userInputClean === variant);\n      if (matched) {\n        console.log(\"TestMode: Found matching variant\");\n      }\n      return matched;\n    }\n\n    // No match\n    return false;\n  };\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n  const handleCancel = () => {\n    console.log('User canceled loading, returning to deck');\n    handleBackToDeck();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading test...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), showCancelButton && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCancel,\n        className: \"cancel-btn\",\n        style: {\n          marginTop: '20px',\n          padding: '8px 16px',\n          background: '#999999',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer'\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this);\n  }\n  if (cards.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No Cards Available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this), testMode === 'starred' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: noCardsFeedback || 'You don\\'t have any starred cards in this deck yet. Star some cards first or try the full test.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            background: '#333',\n            padding: '10px',\n            borderRadius: '5px',\n            margin: '20px 0',\n            fontSize: '12px',\n            textAlign: 'left'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Debug Info:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Starred Card IDs: \", starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Deck ID: \", deckId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Test Mode: \", testMode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Loading Starred: \", loadingStarred ? 'true' : 'false']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              // Check localStorage\n              const local = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n              console.log('localStorage starred cards:', local);\n              alert('localStorage starred cards: ' + (local || 'none'));\n            },\n            children: \"Check Local Storage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This deck doesn't have any cards to test with.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-to-deck-btn\",\n        children: \"Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this);\n  }\n  if (testComplete || viewOnly) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round(results.correct.length / totalCards * 100);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-container results\",\n      children: [viewOnly ? /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"All Starred Cards\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this), !viewOnly && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-summary\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score\",\n          children: [\"Score: \", score, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stats\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"correct-count\",\n            children: [results.correct.length, \" correct\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"incorrect-count\",\n            children: [results.incorrect.length, \" incorrect\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 11\n      }, this), viewOnly && cards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"all-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Your Starred Cards (\", cards.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"results-list\",\n          children: cards.map(card => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"result-item\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-answer\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: card.answer\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 19\n            }, this)\n          }, card.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 11\n      }, this), !viewOnly && results.incorrect.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"incorrect-cards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Incorrect Answers (Automatically Starred)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"results-list\",\n          children: results.incorrect.map((card, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"result-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Correct answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 517,\n                columnNumber: 21\n              }, this), \" \", card.answer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"result-user-answer\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Your answer:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 21\n              }, this), \" \", results.userAnswers[results.correct.length + index]]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 19\n            }, this)]\n          }, card.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-actions\",\n        children: [!viewOnly && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStartOver,\n          className: \"start-over-btn\",\n          children: \"Start Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToDeck,\n          className: \"back-to-deck-btn\",\n          children: \"Back to Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this);\n  }\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToDeck,\n        className: \"back-btn\",\n        children: \"\\u2190 Back to Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ASL Test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress\",\n        children: [currentCardIndex + 1, \" of \", cards.length, testMode === 'starred' && ' (Starred Cards Only)']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: videoSource && (videoSource.includes('/preview') ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n          src: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          allow: \"autoplay\",\n          allowFullScreen: true,\n          style: {\n            border: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          url: videoSource,\n          width: \"100%\",\n          height: \"100%\",\n          controls: true,\n          playing: !submitted,\n          config: {\n            file: {\n              attributes: {\n                controlsList: 'nodownload',\n                disablePictureInPicture: true\n              },\n              forceVideo: true\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), !submitted ? /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"answer-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"answer\",\n            children: \"What is the sign?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"answer\",\n            type: \"text\",\n            value: userAnswer,\n            onChange: e => setUserAnswer(e.target.value),\n            placeholder: \"Type your answer here\",\n            autoComplete: \"off\",\n            autoFocus: true,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-btn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `feedback ${isCorrect ? 'correct' : 'incorrect'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: isCorrect ? 'Correct!' : 'Incorrect'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"The correct answer is: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: currentCard.answer\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 38\n          }, this), !isCorrect && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"auto-starred\",\n            children: \" (Auto-starred for review)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextCard,\n          className: \"next-btn\",\n          children: currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 546,\n    columnNumber: 5\n  }, this);\n};\n_s(TestMode, \"pXCc817KWwLh9pxLWQphtxufjA4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = TestMode;\nexport default TestMode;\nvar _c;\n$RefreshReg$(_c, \"TestMode\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","axios","ReactPlayer","LOCAL_STORAGE_STARRED_KEY","jsxDEV","_jsxDEV","Fragment","_Fragment","shuffleArray","array","newArray","i","length","j","Math","floor","random","TestMode","deckId","_s","cards","setCards","loading","setLoading","error","setError","currentCardIndex","setCurrentCardIndex","userAnswer","setUserAnswer","submitted","setSubmitted","testComplete","setTestComplete","results","setResults","correct","incorrect","userAnswers","videoSource","setVideoSource","starredCardIds","setStarredCardIds","testMode","setTestMode","loadingStarred","setLoadingStarred","viewOnly","setViewOnly","noCardsFeedback","setNoCardsFeedback","showCancelButton","setShowCancelButton","navigate","location","timeoutId","setTimeout","console","log","clearTimeout","state","stateCards","passedCards","map","card","id","video_url","answer","deck_id","starredOnly","shuffledCards","err","fetchCardsFromAPI","fetchTimeoutId","starredIds","localStarred","localStorage","getItem","JSON","parse","apiUrl","response","fetch","ok","Error","status","rawData","json","data","filteredCards","filter","includes","message","currentCard","transformedUrl","transformGoogleDriveUrl","handleKeyPress","e","key","handleNextCard","window","addEventListener","removeEventListener","url","fileId","match","handleSubmit","preventDefault","isCorrect","checkAnswer","prevResults","demoUserId","newStarredIds","setItem","stringify","post","process","env","REACT_APP_API_URL","userId","userInput","correctAnswer","userInputClean","trim","toLowerCase","correctAnswerClean","answerVariants","split","part","matched","some","variant","handleBackToDeck","handleStartOver","handleCancel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","marginTop","padding","background","color","border","borderRadius","cursor","margin","fontSize","textAlign","join","local","alert","totalCards","score","round","index","src","width","height","allow","allowFullScreen","controls","playing","config","file","attributes","controlsList","disablePictureInPicture","forceVideo","onSubmit","htmlFor","type","value","onChange","target","placeholder","autoComplete","autoFocus","required","_c","$RefreshReg$"],"sources":["/Users/gyanmistry/SoftdevI/ASL-Study-Tool/ASLStudyTool/client/src/components/TestMode.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport ReactPlayer from 'react-player';\nimport './TestMode.css';\nimport { LOCAL_STORAGE_STARRED_KEY } from './constants';\nimport { Card } from '../types/Card';\n\ninterface TestModeProps {\n  deckId: string;\n}\n\nconst shuffleArray = <T extends unknown>(array: T[]): T[] => {\n  const newArray = [...array];\n  for (let i = newArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n  }\n  return newArray;\n};\n\nconst TestMode: React.FC<TestModeProps> = ({ deckId }) => {\n  const [cards, setCards] = useState<Card[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [testComplete, setTestComplete] = useState(false);\n  const [results, setResults] = useState<{ correct: Card[], incorrect: Card[], userAnswers: string[] }>({\n    correct: [],\n    incorrect: [],\n    userAnswers: []\n  });\n  const [videoSource, setVideoSource] = useState<string>('');\n  const [starredCardIds, setStarredCardIds] = useState<string[]>([]);\n  const [testMode, setTestMode] = useState<'all' | 'starred'>('all');\n  const [loadingStarred, setLoadingStarred] = useState(true);\n  const [viewOnly, setViewOnly] = useState(false);\n  const [noCardsFeedback, setNoCardsFeedback] = useState<string | null>(null);\n  const [showCancelButton, setShowCancelButton] = useState(false);\n  \n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Timer to show cancel button after 5 seconds of loading\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n    \n    if (loading || loadingStarred) {\n      // Start timer to show cancel button after 5 seconds\n      timeoutId = setTimeout(() => {\n        setShowCancelButton(true);\n        console.log('Loading taking too long, showing cancel button');\n      }, 5000);\n    } else {\n      setShowCancelButton(false);\n    }\n    \n    return () => {\n      // Clear timeout when component unmounts or loading state changes\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [loading, loadingStarred]);\n\n  // Completely rewritten card fetching logic\n  useEffect(() => {\n    // Check if cards were passed directly in the navigation state\n    if (location.state && (location.state as any).cards) {\n      try {\n        // Get cards from state with type assertion\n        const stateCards = (location.state as any).cards;\n        \n        // Ensure each card has the required properties of the Card interface\n        const passedCards: Card[] = stateCards.map((card: any) => ({\n          id: card.id,\n          video_url: card.video_url,\n          answer: card.answer,\n          deck_id: card.deck_id\n        }));\n        \n        console.log(`TestMode: Using ${passedCards.length} cards passed directly from navigation`);\n        \n        // If we're in starred mode, the cards are already filtered\n        if (testMode === 'starred' || (location.state as any).starredOnly) {\n          console.log(`TestMode: Already filtered for starred cards (${passedCards.length} cards)`);\n          setTestMode('starred');\n        }\n        \n        // Set view-only if specified\n        if ((location.state as any).viewOnly) {\n          setViewOnly(true);\n        }\n        \n        // Shuffle and set directly - skip all other fetching\n        const shuffledCards = shuffleArray(passedCards);\n        console.log(`TestMode: Set ${shuffledCards.length} shuffled cards for testing`);\n        setCards(shuffledCards);\n        setLoading(false);\n        return; // Exit early - we have everything we need\n      } catch (err) {\n        console.error('TestMode: Error processing cards from navigation state:', err);\n        // Continue to normal loading in case of error\n      }\n    }\n    \n    // Only run this if we didn't exit early above with direct cards\n    if (!location.state || !(location.state as any).cards) {\n      setLoading(true);\n      fetchCardsFromAPI();\n    }\n  }, [location.state]);\n\n  // Separate function for API fallback (legacy path)\n  const fetchCardsFromAPI = async () => {\n    console.log('TestMode: Attempting API fetch as fallback');\n    setError(null);\n    \n    // Add a timeout to prevent infinite loading\n    const fetchTimeoutId = setTimeout(() => {\n      console.error('Card fetching timed out after 8 seconds');\n      setError('Loading timed out. Please try again.');\n      setLoading(false);\n    }, 8000);\n    \n    try {\n      // Set mode from navigation state if present\n      if (location.state) {\n        if ((location.state as any).starredOnly) {\n          console.log('TestMode: Setting starred mode from state');\n          setTestMode('starred');\n        }\n        if ((location.state as any).viewOnly) {\n          setViewOnly(true);\n        }\n      }\n      \n      // Get starred card IDs first if we need them\n      let starredIds: string[] = [];\n      if (testMode === 'starred' || (location.state && (location.state as any).starredOnly)) {\n        // Try to get from state first\n        if (location.state && (location.state as any).starredCardIds) {\n          starredIds = (location.state as any).starredCardIds;\n          console.log(`TestMode: Using ${starredIds.length} starred IDs from navigation`);\n        } else {\n          // Fall back to localStorage\n          const localStarred = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n          if (localStarred) {\n            starredIds = JSON.parse(localStarred);\n            console.log(`TestMode: Using ${starredIds.length} starred IDs from localStorage`);\n          }\n        }\n        setStarredCardIds(starredIds);\n      }\n      \n      console.log(`TestMode: Fetching cards for deck ${deckId}`);\n      \n      // Fetch the cards\n      const apiUrl = `/api/cards/${deckId}`;\n      console.log(`TestMode: Fetching from ${apiUrl}`);\n      const response = await fetch(apiUrl);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch cards (${response.status})`);\n      }\n      \n      const rawData = await response.json();\n      \n      // Ensure proper Card type\n      const data: Card[] = rawData.map((card: any) => ({\n        id: card.id,\n        video_url: card.video_url,\n        answer: card.answer,\n        deck_id: card.deck_id\n      }));\n      \n      console.log(`TestMode: Got ${data.length} cards from API`);\n      \n      // Filter if necessary\n      let filteredCards = data;\n      if (testMode === 'starred' || (location.state && (location.state as any).starredOnly)) {\n        if (starredIds.length === 0) {\n          console.log('TestMode: No starred cards, showing empty set');\n          setNoCardsFeedback('No starred cards found. Please star some cards and try again.');\n          filteredCards = [];\n        } else {\n          filteredCards = data.filter((card: Card) => starredIds.includes(card.id));\n          console.log(`TestMode: Filtered to ${filteredCards.length} starred cards`);\n          \n          if (filteredCards.length === 0) {\n            setNoCardsFeedback('No starred cards found in this deck. Please star some cards and try again.');\n          }\n        }\n      }\n      \n      // Shuffle and set cards\n      const shuffledCards = shuffleArray(filteredCards);\n      console.log(`TestMode: Set ${shuffledCards.length} shuffled cards for testing`);\n      setCards(shuffledCards);\n      \n    } catch (error: any) {\n      console.error('TestMode: Error fetching cards:', error);\n      setError(error.message || 'Failed to load cards. Please try again.');\n    } finally {\n      clearTimeout(fetchTimeoutId);\n      setLoading(false);\n      setLoadingStarred(false); // Also mark starred as done\n    }\n  };\n\n  useEffect(() => {\n    if (cards.length > 0 && currentCardIndex < cards.length) {\n      const currentCard = cards[currentCardIndex];\n      // Transform Google Drive URL if needed (similar to Flashcard component)\n      if (currentCard.video_url.includes('drive.google.com')) {\n        const transformedUrl = transformGoogleDriveUrl(currentCard.video_url);\n        setVideoSource(transformedUrl);\n      } else {\n        setVideoSource(currentCard.video_url);\n      }\n    }\n  }, [cards, currentCardIndex]);\n\n  // Add keyboard event listener for Enter key to navigate to next card\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' && submitted && !testComplete) {\n        handleNextCard();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [submitted, testComplete, currentCardIndex, cards.length]);\n\n  const transformGoogleDriveUrl = (url: string): string => {\n    // Check if it's a Google Drive URL\n    if (url.includes('drive.google.com')) {\n      // Extract file ID from URL\n      let fileId = '';\n      \n      // Handle different Google Drive URL formats\n      if (url.includes('drive.google.com/file/d/')) {\n        // Format: https://drive.google.com/file/d/{fileId}/view\n        const match = url.match(/\\/file\\/d\\/([^\\/]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('drive.google.com/open?id=')) {\n        // Format: https://drive.google.com/open?id={fileId}\n        const match = url.match(/open\\?id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      } else if (url.includes('id=')) {\n        // Format: https://drive.google.com/uc?id={fileId}\n        const match = url.match(/id=([^&]+)/);\n        if (match && match[1]) {\n          fileId = match[1];\n        }\n      }\n      \n      if (fileId) {\n        return `https://drive.google.com/file/d/${fileId}/preview`;\n      }\n    }\n    \n    return url;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!submitted && cards.length > 0) {\n      const currentCard = cards[currentCardIndex];\n      \n      // New logic to handle slash-separated answers\n      const isCorrect = checkAnswer(userAnswer, currentCard.answer);\n      \n      // Update results\n      if (isCorrect) {\n        setResults(prevResults => ({\n          ...prevResults,\n          correct: [...prevResults.correct, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n      } else {\n        setResults(prevResults => ({\n          ...prevResults,\n          incorrect: [...prevResults.incorrect, currentCard],\n          userAnswers: [...prevResults.userAnswers, userAnswer]\n        }));\n        \n        // Auto-star incorrect answers\n        if (!starredCardIds.includes(currentCard.id)) {\n          try {\n            // In a real app, you'd get the actual user ID from auth\n            const demoUserId = \"demo-user-id\"; // Hardcoded for demo\n            \n            // Update local state first\n            const newStarredIds = [...starredCardIds, currentCard.id];\n            setStarredCardIds(newStarredIds);\n            \n            // Save to localStorage\n            localStorage.setItem(LOCAL_STORAGE_STARRED_KEY, JSON.stringify(newStarredIds));\n            \n            // Try to star on server (but don't fail if it doesn't work)\n            await axios.post(`${process.env.REACT_APP_API_URL}/api/cards/${currentCard.id}/star`, { \n              userId: demoUserId \n            });\n          } catch (err) {\n            console.error(\"Error starring incorrect card on server:\", err);\n            // Already updated localStorage, so we don't need to do anything else\n          }\n        }\n      }\n      \n      setSubmitted(true);\n    }\n  };\n  \n  // New helper function to check if an answer is correct, handling slash variants\n  const checkAnswer = (userInput: string, correctAnswer: string): boolean => {\n    const userInputClean = userInput.trim().toLowerCase();\n    const correctAnswerClean = correctAnswer.trim().toLowerCase();\n    \n    // Direct match\n    if (userInputClean === correctAnswerClean) {\n      console.log(\"TestMode: Exact match\");\n      return true;\n    }\n    \n    // Check for slash in the correct answer\n    if (correctAnswerClean.includes('/')) {\n      console.log(\"TestMode: Slash detected in answer, checking alternatives\");\n      \n      // Split the answer by slash and check each part\n      const answerVariants = correctAnswerClean.split('/').map(part => part.trim());\n      console.log(\"TestMode: Answer variants:\", answerVariants);\n      \n      // Check if user's answer matches any of the variants\n      const matched = answerVariants.some(variant => userInputClean === variant);\n      \n      if (matched) {\n        console.log(\"TestMode: Found matching variant\");\n      }\n      \n      return matched;\n    }\n    \n    // No match\n    return false;\n  };\n\n  const handleNextCard = () => {\n    if (currentCardIndex < cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setUserAnswer('');\n      setSubmitted(false);\n    } else {\n      setTestComplete(true);\n    }\n  };\n\n  const handleBackToDeck = () => {\n    // If we're testing all decks, go back to home\n    if (deckId === 'all-decks') {\n      navigate('/');\n    } else {\n      // Otherwise go back to the specific deck\n      navigate(`/deck/${deckId}`);\n    }\n  };\n\n  const handleStartOver = () => {\n    setCurrentCardIndex(0);\n    setUserAnswer('');\n    setSubmitted(false);\n    setTestComplete(false);\n    setResults({\n      correct: [],\n      incorrect: [],\n      userAnswers: []\n    });\n  };\n\n  const handleCancel = () => {\n    console.log('User canceled loading, returning to deck');\n    handleBackToDeck();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"test-container loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading test...</p>\n        {showCancelButton && (\n          <button \n            onClick={handleCancel} \n            className=\"cancel-btn\"\n            style={{\n              marginTop: '20px',\n              padding: '8px 16px',\n              background: '#999999',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Cancel\n          </button>\n        )}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"test-container error\">\n        <h2>Error</h2>\n        <p>{error}</p>\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (cards.length === 0) {\n    return (\n      <div className=\"test-container error\">\n        <h2>No Cards Available</h2>\n        {testMode === 'starred' ? (\n          <>\n            <p>{noCardsFeedback || 'You don\\'t have any starred cards in this deck yet. Star some cards first or try the full test.'}</p>\n            {/* Debug information */}\n            <div style={{ \n              background: '#333', \n              padding: '10px', \n              borderRadius: '5px', \n              margin: '20px 0', \n              fontSize: '12px',\n              textAlign: 'left'\n            }}>\n              <p>Debug Info:</p>\n              <p>Starred Card IDs: {starredCardIds.length > 0 ? starredCardIds.join(', ') : 'None'}</p>\n              <p>Deck ID: {deckId}</p>\n              <p>Test Mode: {testMode}</p>\n              <p>Loading Starred: {loadingStarred ? 'true' : 'false'}</p>\n              <button onClick={() => {\n                // Check localStorage\n                const local = localStorage.getItem(LOCAL_STORAGE_STARRED_KEY);\n                console.log('localStorage starred cards:', local);\n                alert('localStorage starred cards: ' + (local || 'none'));\n              }}>Check Local Storage</button>\n            </div>\n          </>\n        ) : (\n          <p>This deck doesn't have any cards to test with.</p>\n        )}\n        <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n          Back to Deck\n        </button>\n      </div>\n    );\n  }\n\n  if (testComplete || viewOnly) {\n    const totalCards = results.correct.length + results.incorrect.length;\n    const score = Math.round((results.correct.length / totalCards) * 100);\n    \n    return (\n      <div className=\"test-container results\">\n        {viewOnly ? (\n          <h2>All Starred Cards</h2>\n        ) : (\n          <h2>Test Complete!</h2>\n        )}\n        \n        {!viewOnly && (\n          <div className=\"test-summary\">\n            <div className=\"score\">Score: {score}%</div>\n            <div className=\"stats\">\n              <div className=\"correct-count\">{results.correct.length} correct</div>\n              <div className=\"incorrect-count\">{results.incorrect.length} incorrect</div>\n            </div>\n          </div>\n        )}\n        \n        {/* Show all cards in view mode */}\n        {viewOnly && cards.length > 0 && (\n          <div className=\"all-cards\">\n            <h3>Your Starred Cards ({cards.length})</h3>\n            <ul className=\"results-list\">\n              {cards.map((card) => (\n                <li key={card.id} className=\"result-item\">\n                  <div className=\"result-answer\">\n                    <strong>{card.answer}</strong>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        {/* Show incorrect answers in test mode */}\n        {!viewOnly && results.incorrect.length > 0 && (\n          <div className=\"incorrect-cards\">\n            <h3>Incorrect Answers (Automatically Starred)</h3>\n            <ul className=\"results-list\">\n              {results.incorrect.map((card, index) => (\n                <li key={card.id} className=\"result-item\">\n                  <div className=\"result-answer\">\n                    <strong>Correct answer:</strong> {card.answer}\n                  </div>\n                  <div className=\"result-user-answer\">\n                    <strong>Your answer:</strong> {results.userAnswers[results.correct.length + index]}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        <div className=\"test-actions\">\n          {!viewOnly && (\n            <button onClick={handleStartOver} className=\"start-over-btn\">\n              Start Over\n            </button>\n          )}\n          <button onClick={handleBackToDeck} className=\"back-to-deck-btn\">\n            Back to Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  const currentCard = cards[currentCardIndex];\n  const isCorrect = submitted && userAnswer.trim().toLowerCase() === currentCard.answer.trim().toLowerCase();\n  \n  return (\n    <div className=\"test-container\">\n      <div className=\"test-header\">\n        <button onClick={handleBackToDeck} className=\"back-btn\">\n          &larr; Back to Deck\n        </button>\n        <h1>ASL Test</h1>\n        <div className=\"progress\">\n          {currentCardIndex + 1} of {cards.length}\n          {testMode === 'starred' && ' (Starred Cards Only)'}\n        </div>\n      </div>\n\n      <div className=\"test-content\">\n        <div className=\"video-container\">\n          {videoSource && (\n            videoSource.includes('/preview') ? (\n              <iframe \n                src={videoSource}\n                width=\"100%\" \n                height=\"100%\" \n                allow=\"autoplay\" \n                allowFullScreen\n                style={{ border: 'none' }}\n              ></iframe>\n            ) : (\n              <ReactPlayer\n                url={videoSource}\n                width=\"100%\"\n                height=\"100%\"\n                controls\n                playing={!submitted}\n                config={{\n                  file: {\n                    attributes: {\n                      controlsList: 'nodownload',\n                      disablePictureInPicture: true\n                    },\n                    forceVideo: true\n                  }\n                }}\n              />\n            )\n          )}\n        </div>\n\n        {!submitted ? (\n          <form onSubmit={handleSubmit} className=\"answer-form\">\n            <div className=\"input-group\">\n              <label htmlFor=\"answer\">What is the sign?</label>\n              <input\n                id=\"answer\"\n                type=\"text\"\n                value={userAnswer}\n                onChange={(e) => setUserAnswer(e.target.value)}\n                placeholder=\"Type your answer here\"\n                autoComplete=\"off\"\n                autoFocus\n                required\n              />\n            </div>\n            <button type=\"submit\" className=\"submit-btn\">\n              Submit\n            </button>\n          </form>\n        ) : (\n          <div className={`feedback ${isCorrect ? 'correct' : 'incorrect'}`}>\n            <h2>\n              {isCorrect ? 'Correct!' : 'Incorrect'}\n            </h2>\n            <p>\n              The correct answer is: <strong>{currentCard.answer}</strong>\n              {!isCorrect && <span className=\"auto-starred\"> (Auto-starred for review)</span>}\n            </p>\n            <button onClick={handleNextCard} className=\"next-btn\">\n              {currentCardIndex < cards.length - 1 ? 'Next Sign' : 'See Results'}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TestMode; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}